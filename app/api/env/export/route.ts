import { NextRequest, NextResponse } from 'next/server';
import { VaultAgent } from '../../../../vault/VaultAgent';
import { createLogger } from '../../../../src/utils/logger';

const logger = createLogger('EnvExportAPI');

// Initialize VaultAgent with configurable path
const vaultPath = process.env.VAULT_PATH || './vault/secrets.sops.yaml';
const vaultAgent = new VaultAgent(vaultPath);

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const project = searchParams.get('project');
    const category = searchParams.get('category') || undefined;

    logger.info('Environment export request', { project, category });

    if (!project) {
      return NextResponse.json(
        { error: 'Project parameter is required' },
        { status: 400 }
      );
    }

    // Load vault and export environment variables
    await vaultAgent.loadVault();
    
    // Use real VaultAgent export functionality
    const envContent = vaultAgent.exportEnvFromVault({ 
      project, 
      category 
    });

    if (!envContent.trim()) {
      logger.warn('No environment variables found for project', { project, category });
      return NextResponse.json(
        { 
          error: `No environment variables found for project '${project}'${category ? ` in category '${category}'` : ''}`,
          details: 'Project may not exist or may not contain any secrets' 
        },
        { status: 404 }
      );
    }

    // Add generation header comment
    const timestamp = new Date().toISOString();
    const header = `# Environment Variables for Project: ${project}
# Generated by Secrets Agent on ${timestamp}
# Category: ${category || 'all'}
# Source: Encrypted Vault (SOPS)
#
`;

    const finalContent = header + envContent;

    logger.info('Environment export successful', { 
      project, 
      category, 
      contentLength: finalContent.length,
      secretCount: envContent.split('\n').filter(line => line.includes('=')).length
    });

    return new NextResponse(finalContent, {
      status: 200,
      headers: {
        'Content-Type': 'text/plain',
        'Content-Disposition': `attachment; filename="${project}${category ? `.${category}` : ''}.env"`,
        'X-Secrets-Agent': 'real-vault-export',
        'X-Project': project,
        'X-Category': category || 'all'
      },
    });

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    
    logger.error('Environment export failed', { 
      error: errorMessage,
      project: request.nextUrl.searchParams.get('project'),
      category: request.nextUrl.searchParams.get('category')
    });

    // Handle specific vault errors
    if (errorMessage.includes('Vault load failed') || errorMessage.includes('sops')) {
      return NextResponse.json(
        { 
          error: 'Vault access failed',
          details: 'Unable to decrypt vault. Ensure SOPS keys are configured and vault exists.',
          suggestion: 'Run vault initialization or check SOPS configuration'
        },
        { status: 503 }
      );
    }

    return NextResponse.json(
      { 
        error: 'Environment export failed',
        details: errorMessage 
      },
      { status: 500 }
    );
  }
} 