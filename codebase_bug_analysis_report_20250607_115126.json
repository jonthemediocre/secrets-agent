{
  "summary": {
    "total_execution_time": 9.82,
    "total_issues_found": 1817,
    "severity_breakdown": {
      "critical": 1,
      "medium": 969,
      "high": 45,
      "low": 802
    },
    "issue_type_breakdown": {
      "syntax_error": 1,
      "missing_return": 864,
      "command_injection": 20,
      "code_injection": 23,
      "hardcoded_api_key": 2,
      "inefficient_list_append": 786,
      "inefficient_iteration": 7,
      "inefficient_dict_iteration": 9,
      "too_many_parameters": 81,
      "long_function": 4,
      "unpinned_dependency": 20
    },
    "analyses_completed": 6,
    "proposals_processed": 6
  },
  "analysis_results": {
    "syntax_errors": {
      "expert": "syntax",
      "issues_found": 1,
      "files_analyzed": 193,
      "status": "completed"
    },
    "logic_bugs": {
      "expert": "logic",
      "issues_found": 864,
      "files_analyzed": 193,
      "status": "completed"
    },
    "security_vulnerabilities": {
      "expert": "security",
      "issues_found": 45,
      "files_analyzed": 193,
      "status": "completed"
    },
    "performance_issues": {
      "expert": "performance",
      "issues_found": 802,
      "files_analyzed": 193,
      "status": "completed"
    },
    "code_smells": {
      "expert": "quality",
      "issues_found": 85,
      "files_analyzed": 193,
      "status": "completed"
    },
    "dependency_issues": {
      "expert": "dependency",
      "issues_found": 20,
      "status": "completed"
    }
  },
  "bug_reports": [
    {
      "file_path": "vanta_secrets_audit.py",
      "line_number": 7,
      "bug_type": "syntax_error",
      "severity": "critical",
      "description": "Syntax error: closing parenthesis ']' does not match opening parenthesis '('",
      "code_snippet": "    leaks = re.findall(r\"(api|secret|token|key)[_\\-]?[a-z]*\\s*=\\s*['\\\\\"].+?['\\\"]\", content, re.IGNORECASE)",
      "suggested_fix": "Fix syntax according to Python grammar rules",
      "expert_agent": "syntax_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 55,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__post_init__' may be missing return statement",
      "code_snippet": "    def __post_init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 62,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, root_path: str = \".\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 366,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "            def __init__(self, issues_list, file_path, lines):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 371,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'visit_FunctionDef' may be missing return statement",
      "code_snippet": "            def visit_FunctionDef(self, node):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 389,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'visit_Compare' may be missing return statement",
      "code_snippet": "            def visit_Compare(self, node):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 404,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_check_unreachable_code' may be missing return statement",
      "code_snippet": "            def _check_unreachable_code(self, func_node):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 498,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "            def __init__(self, issues_list, file_path, lines):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 503,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'visit_FunctionDef' may be missing return statement",
      "code_snippet": "            def visit_FunctionDef(self, node):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 733,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_save_analysis_report' may be missing return statement",
      "code_snippet": "    def _save_analysis_report(self, results: Dict[str, Any]) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 744,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'main' may be missing return statement",
      "code_snippet": "def main():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "access_mesh.py",
      "line_number": 10,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, registry_path: Path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "access_mesh.py",
      "line_number": 17,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'bind' may be missing return statement",
      "code_snippet": "    def bind(self, project: str, tools: list, secrets: list):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_generated_mdc_system.py",
      "line_number": 80,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id: str, vanta_path: Path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_generated_mdc_system.py",
      "line_number": 548,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, vanta_path: Path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agentic_bootstrap_engine.py",
      "line_number": 110,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agentic_bootstrap_engine.py",
      "line_number": 272,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agentic_bootstrap_engine.py",
      "line_number": 446,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agentic_bootstrap_engine.py",
      "line_number": 630,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agentic_bootstrap_engine.py",
      "line_number": 736,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit_optimized.py",
      "line_number": 64,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, root_path: str = \".\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit_optimized.py",
      "line_number": 74,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'discover_cli_functions_optimized' may be missing return statement",
      "code_snippet": "    def discover_cli_functions_optimized(self) -> Generator[CLIFunction, None, None]:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit_optimized.py",
      "line_number": 135,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_parse_click_commands_optimized' may be missing return statement",
      "code_snippet": "    def _parse_click_commands_optimized(self, content: str, module: str) -> Generator[CLIFunction, None, None]:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit_optimized.py",
      "line_number": 157,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_parse_cmd_functions_optimized' may be missing return statement",
      "code_snippet": "    def _parse_cmd_functions_optimized(self, content: str, module: str) -> Generator[CLIFunction, None, None]:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit_optimized.py",
      "line_number": 221,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_process_scripts_directory_optimized' may be missing return statement",
      "code_snippet": "    def _process_scripts_directory_optimized(self, scripts_dir: Path) -> Generator[CLIFunction, None, None]:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit_optimized.py",
      "line_number": 236,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'discover_web_components_optimized' may be missing return statement",
      "code_snippet": "    def discover_web_components_optimized(self) -> Generator[WebComponent, None, None]:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit_optimized.py",
      "line_number": 247,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_analyze_web_directory_optimized' may be missing return statement",
      "code_snippet": "    def _analyze_web_directory_optimized(self, dir_path: Path) -> Generator[WebComponent, None, None]:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit_optimized.py",
      "line_number": 445,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'main' may be missing return statement",
      "code_snippet": "def main():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 29,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, base_url: str = \"http://localhost:3000\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 127,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'cli' may be missing return statement",
      "code_snippet": "def cli(ctx, config, verbose, server):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 337,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'status' may be missing return statement",
      "code_snippet": "def status(ctx):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 370,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'version' may be missing return statement",
      "code_snippet": "def version():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 386,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'run_with_secrets' may be missing return statement",
      "code_snippet": "def run_with_secrets(ctx, environment, key_pattern, ttl, inject_as, command_with_args):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 491,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'mcp' may be missing return statement",
      "code_snippet": "def mcp():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 608,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'status' may be missing return statement",
      "code_snippet": "def status(ctx, job_id):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 653,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'service_status' may be missing return statement",
      "code_snippet": "def service_status(ctx):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 716,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'reload' may be missing return statement",
      "code_snippet": "def reload(ctx, environment):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 746,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'health' may be missing return statement",
      "code_snippet": "def health(ctx):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 925,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'categories' may be missing return statement",
      "code_snippet": "def categories(ctx):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 1018,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'install' may be missing return statement",
      "code_snippet": "def install(ctx, server_id, project_path, auto_config):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 1059,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'analyze' may be missing return statement",
      "code_snippet": "def analyze(ctx, project_path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 1101,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'domino' may be missing return statement",
      "code_snippet": "def domino():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 1171,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'status' may be missing return statement",
      "code_snippet": "def status(ctx, audit_id):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 1407,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'monitor_domino_audit' may be missing return statement",
      "code_snippet": "def monitor_domino_audit(api: VantaSecretsAPI, audit_id: str):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 48,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, root_path: str = \".\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 81,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_analyze_cli_file' may be missing return statement",
      "code_snippet": "    def _analyze_cli_file(self, file_path: Path) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 98,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_parse_click_commands' may be missing return statement",
      "code_snippet": "    def _parse_click_commands(self, content: str, module: str) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 127,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_parse_cmd_functions' may be missing return statement",
      "code_snippet": "    def _parse_cmd_functions(self, content: str, module: str) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 205,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_analyze_web_directory' may be missing return statement",
      "code_snippet": "    def _analyze_web_directory(self, dir_path: Path) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 213,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_analyze_web_file' may be missing return statement",
      "code_snippet": "    def _analyze_web_file(self, file_path: Path) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 227,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_analyze_api_file' may be missing return statement",
      "code_snippet": "    def _analyze_api_file(self, file_path: Path) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 239,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_find_buttons' may be missing return statement",
      "code_snippet": "    def _find_buttons(self, content: str, file_path: Path) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 260,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_find_forms' may be missing return statement",
      "code_snippet": "    def _find_forms(self, content: str, file_path: Path) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 271,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_find_dashboards' may be missing return statement",
      "code_snippet": "    def _find_dashboards(self, content: str, file_path: Path) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 282,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_find_api_routes' may be missing return statement",
      "code_snippet": "    def _find_api_routes(self, content: str, file_path: Path) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 303,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'map_cli_to_web' may be missing return statement",
      "code_snippet": "    def map_cli_to_web(self) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 463,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'main' may be missing return statement",
      "code_snippet": "def main():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli.py",
      "line_number": 20,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'cmd_scan' may be missing return statement",
      "code_snippet": "def cmd_scan(project_path: Path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli.py",
      "line_number": 26,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'cmd_link' may be missing return statement",
      "code_snippet": "def cmd_link(project_path: Path, secure=False, password=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli.py",
      "line_number": 185,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'cmd_list' may be missing return statement",
      "code_snippet": "def cmd_list():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli.py",
      "line_number": 212,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'cmd_bootstrap' may be missing return statement",
      "code_snippet": "def cmd_bootstrap(project_path: Path, secure=False, password=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli.py",
      "line_number": 222,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'cmd_add_secret' may be missing return statement",
      "code_snippet": "def cmd_add_secret(key, value, secure=False, password=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "a2a_messaging_system.py",
      "line_number": 99,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, vanta_path: Path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "a2a_messaging_system.py",
      "line_number": 196,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, vanta_path: Path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "a2a_messaging_system.py",
      "line_number": 364,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, vanta_path: Path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 88,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, vanta_path: Path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 317,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, vanta_path: Path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 547,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, vanta_path: Path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_global_rules.py",
      "line_number": 24,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'demo_header' may be missing return statement",
      "code_snippet": "def demo_header():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_global_rules.py",
      "line_number": 32,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'demo_fr1_config_system' may be missing return statement",
      "code_snippet": "def demo_fr1_config_system():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_global_rules.py",
      "line_number": 58,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'demo_fr2_fr3_includes' may be missing return statement",
      "code_snippet": "def demo_fr2_fr3_includes():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_global_rules.py",
      "line_number": 106,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'demo_fr4_multi_format' may be missing return statement",
      "code_snippet": "def demo_fr4_multi_format():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_global_rules.py",
      "line_number": 138,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'demo_fr5_error_handling' may be missing return statement",
      "code_snippet": "def demo_fr5_error_handling():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_global_rules.py",
      "line_number": 173,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'demo_fr6_fr7_cli' may be missing return statement",
      "code_snippet": "def demo_fr6_fr7_cli():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_global_rules.py",
      "line_number": 192,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'demo_fr8_format_adapters' may be missing return statement",
      "code_snippet": "def demo_fr8_format_adapters():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_global_rules.py",
      "line_number": 221,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'demo_fr9_fr10_user_experience' may be missing return statement",
      "code_snippet": "def demo_fr9_fr10_user_experience():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_global_rules.py",
      "line_number": 257,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'demo_integration_showcase' may be missing return statement",
      "code_snippet": "def demo_integration_showcase():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_global_rules.py",
      "line_number": 275,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'main' may be missing return statement",
      "code_snippet": "def main():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_mcp_agent_first_development.py",
      "line_number": 27,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_mcp_agent_first_development.py",
      "line_number": 89,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id: str):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_phase_1_2.py",
      "line_number": 54,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id: str):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_phase_3_intelligent_secrets.py",
      "line_number": 256,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'create_sample_vault_structure' may be missing return statement",
      "code_snippet": "def create_sample_vault_structure():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_phase_4_1_production_integration.py",
      "line_number": 298,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'create_sample_production_structure' may be missing return statement",
      "code_snippet": "def create_sample_production_structure():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "collapse_delta.py",
      "line_number": 14,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'append_to_log' may be missing return statement",
      "code_snippet": "def append_to_log(log_path: Path, delta_text: str):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_ultra_enhanced_bootstrap.py",
      "line_number": 46,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, demo_path: Path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_universal_agent_platform.py",
      "line_number": 28,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_universal_agent_platform.py",
      "line_number": 83,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id: str):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "integration_phase_2_1_security_intelligence.py",
      "line_number": 52,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, vmc: VantaMasterCoreEnhanced):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 39,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__post_init__' may be missing return statement",
      "code_snippet": "    def __post_init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 58,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__post_init__' may be missing return statement",
      "code_snippet": "    def __post_init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 74,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, root_path: str = \".\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 82,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'scan_python_features' may be missing return statement",
      "code_snippet": "    def scan_python_features(self) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 100,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_scan_directory_for_python' may be missing return statement",
      "code_snippet": "    def _scan_directory_for_python(self, directory: Path) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 107,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_analyze_python_file' may be missing return statement",
      "code_snippet": "    def _analyze_python_file(self, file_path: Path) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 124,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_extract_features_from_ast' may be missing return statement",
      "code_snippet": "    def _extract_features_from_ast(self, tree: ast.AST, file_path: Path, content: str) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 134,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_process_class_definition' may be missing return statement",
      "code_snippet": "    def _process_class_definition(self, node: ast.ClassDef, file_path: str, content: str) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 229,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_extract_features_with_regex' may be missing return statement",
      "code_snippet": "    def _extract_features_with_regex(self, content: str, file_path: Path) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 252,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'scan_web_interface' may be missing return statement",
      "code_snippet": "    def scan_web_interface(self) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 264,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_scan_directory_for_web' may be missing return statement",
      "code_snippet": "    def _scan_directory_for_web(self, directory: Path) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 276,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'scan_expo_interface' may be missing return statement",
      "code_snippet": "    def scan_expo_interface(self) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 288,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_scan_directory_for_expo' may be missing return statement",
      "code_snippet": "    def _scan_directory_for_expo(self, directory: Path) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 294,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'analyze_coverage' may be missing return statement",
      "code_snippet": "    def analyze_coverage(self) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 512,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'main' may be missing return statement",
      "code_snippet": "def main():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_enhancement_coe_agent.py",
      "line_number": 36,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__post_init__' may be missing return statement",
      "code_snippet": "    def __post_init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_enhancement_coe_agent.py",
      "line_number": 43,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, root_path: str = \".\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_enhancement_coe_agent.py",
      "line_number": 535,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_create_directory_structure' may be missing return statement",
      "code_snippet": "    def _create_directory_structure(self, structure: Dict, base_path: Path) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_enhancement_coe_agent.py",
      "line_number": 560,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_save_execution_report' may be missing return statement",
      "code_snippet": "    def _save_execution_report(self, results: Dict[str, Any]) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_enhancement_coe_agent.py",
      "line_number": 843,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'main' may be missing return statement",
      "code_snippet": "def main():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_enhancement_coe_agent_optimized.py",
      "line_number": 44,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, id: str, type: str, context: Dict[str, Any], ",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_enhancement_coe_agent_optimized.py",
      "line_number": 59,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, root_path: str = \".\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_enhancement_coe_agent_optimized.py",
      "line_number": 385,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_collect_file_operations' may be missing return statement",
      "code_snippet": "    def _collect_file_operations(self, structure: Dict[str, Any], current_path: Path, ",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_enhancement_coe_agent_optimized.py",
      "line_number": 628,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_log_execution' may be missing return statement",
      "code_snippet": "    def _log_execution(self, action: str, result: Dict[str, Any]) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_enhancement_coe_agent_optimized.py",
      "line_number": 680,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_save_execution_report_optimized' may be missing return statement",
      "code_snippet": "    def _save_execution_report_optimized(self, results: Dict[str, Any]) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_enhancement_coe_agent_optimized.py",
      "line_number": 709,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'main' may be missing return statement",
      "code_snippet": "def main():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mobile_app_enhancement_coe.py",
      "line_number": 41,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__post_init__' may be missing return statement",
      "code_snippet": "    def __post_init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mobile_app_enhancement_coe.py",
      "line_number": 48,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, root_path: str = \".\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mobile_app_enhancement_coe.py",
      "line_number": 643,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_collect_file_operations' may be missing return statement",
      "code_snippet": "    def _collect_file_operations(self, structure: Dict[str, Any], current_path: Path, ",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mobile_app_enhancement_coe.py",
      "line_number": 728,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_save_execution_report' may be missing return statement",
      "code_snippet": "    def _save_execution_report(self, results: Dict[str, Any]) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mobile_app_enhancement_coe.py",
      "line_number": 789,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'main' may be missing return statement",
      "code_snippet": "def main():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "production_deploy.py",
      "line_number": 170,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'display_summary' may be missing return statement",
      "code_snippet": "def display_summary():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "rule_converter.py",
      "line_number": 38,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'main' may be missing return statement",
      "code_snippet": "def main():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "secrets_agent_launch_wizard.py",
      "line_number": 15,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'run_wizard' may be missing return statement",
      "code_snippet": "def run_wizard():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "secrets_watcher.py",
      "line_number": 11,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'watch_secrets' may be missing return statement",
      "code_snippet": "def watch_secrets(path: Path, project_path: Path, interval=3):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "secret_broker.py",
      "line_number": 15,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, secrets_path: Path, secure=False, password=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup_secure_secrets.py",
      "line_number": 21,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'create_secure_storage' may be missing return statement",
      "code_snippet": "def create_secure_storage(master_password, secrets_file=\"secrets.yaml\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup_secure_secrets.py",
      "line_number": 104,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'main' may be missing return statement",
      "code_snippet": "def main():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup_secure_secrets_v2.py",
      "line_number": 21,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'create_secure_storage' may be missing return statement",
      "code_snippet": "def create_secure_storage(master_password, secrets_file=\"secrets.yaml\", auto_yes=False):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup_secure_secrets_v2.py",
      "line_number": 109,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'main' may be missing return statement",
      "code_snippet": "def main():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "test_api.py",
      "line_number": 24,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'setup_test_environment' may be missing return statement",
      "code_snippet": "def setup_test_environment():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "test_runner.py",
      "line_number": 11,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'run' may be missing return statement",
      "code_snippet": "def run(command, description):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "test_runner.py",
      "line_number": 20,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'setup_test_environment' may be missing return statement",
      "code_snippet": "def setup_test_environment():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_phase_4_2_business_enhancement.py",
      "line_number": 412,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'cleanup_demo_files' may be missing return statement",
      "code_snippet": "def cleanup_demo_files():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_export.py",
      "line_number": 5,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'export_crewai' may be missing return statement",
      "code_snippet": "def export_crewai():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_export.py",
      "line_number": 15,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'export_sbom' may be missing return statement",
      "code_snippet": "def export_sbom():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_export.py",
      "line_number": 24,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'main' may be missing return statement",
      "code_snippet": "def main():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "deploy_stack.py",
      "line_number": 22,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'bind_domain' may be missing return statement",
      "code_snippet": "def bind_domain(host, domain):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "deploy_stack.py",
      "line_number": 30,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'main' may be missing return statement",
      "code_snippet": "def main():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_get.py",
      "line_number": 12,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'patch_os_env' may be missing return statement",
      "code_snippet": "def patch_os_env():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_global_rules.py",
      "line_number": 92,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, project_root: str = \".\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_global_rules.py",
      "line_number": 121,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_save_config' may be missing return statement",
      "code_snippet": "    def _save_config(self) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_global_rules.py",
      "line_number": 422,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_add_rule_root' may be missing return statement",
      "code_snippet": "    def _add_rule_root(self, path: str) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_global_rules.py",
      "line_number": 474,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'generate_globalrules_synced' may be missing return statement",
      "code_snippet": "    def generate_globalrules_synced(self) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_global_rules.py",
      "line_number": 525,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'create_reminder_rule' may be missing return statement",
      "code_snippet": "    def create_reminder_rule(self) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_global_rules.py",
      "line_number": 571,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_create_basic_globalrules' may be missing return statement",
      "code_snippet": "    def _create_basic_globalrules(self) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_global_rules.py",
      "line_number": 612,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'list_rule_sources' may be missing return statement",
      "code_snippet": "    def list_rule_sources(self) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_global_rules.py",
      "line_number": 713,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'install' may be missing return statement",
      "code_snippet": "def install(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_global_rules.py",
      "line_number": 724,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'update' may be missing return statement",
      "code_snippet": "def update(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_global_rules.py",
      "line_number": 740,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'sync' may be missing return statement",
      "code_snippet": "def sync():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_global_rules.py",
      "line_number": 746,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'init' may be missing return statement",
      "code_snippet": "def init():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_global_rules.py",
      "line_number": 776,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'status' may be missing return statement",
      "code_snippet": "def status():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_global_rules.py",
      "line_number": 805,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'validate' may be missing return statement",
      "code_snippet": "def validate():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_license_check.py",
      "line_number": 5,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'check_license' may be missing return statement",
      "code_snippet": "def check_license():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 32,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, config: AdapterConfig):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 36,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'convert' may be missing return statement",
      "code_snippet": "    def convert(self, resolved_rules: List[ResolvedRule]) -> str:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 41,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'get_file_extension' may be missing return statement",
      "code_snippet": "    def get_file_extension(self) -> str:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_standardization_agent.py",
      "line_number": 64,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__post_init__' may be missing return statement",
      "code_snippet": "    def __post_init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_standardization_agent.py",
      "line_number": 78,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__post_init__' may be missing return statement",
      "code_snippet": "    def __post_init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_standardization_agent.py",
      "line_number": 94,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, project_root: str = \".\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_standardization_agent.py",
      "line_number": 810,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'display_report' may be missing return statement",
      "code_snippet": "    def display_report(self, report: StandardizationReport) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_standardization_agent.py",
      "line_number": 994,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'scan' may be missing return statement",
      "code_snippet": "def scan(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_standardization_agent.py",
      "line_number": 1019,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'create_manifests' may be missing return statement",
      "code_snippet": "def create_manifests(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_standardization_agent.py",
      "line_number": 1038,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'create_globalrules' may be missing return statement",
      "code_snippet": "def create_globalrules(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vault_api_server.py",
      "line_number": 33,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vault_api_server.py",
      "line_number": 54,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vault_api_server.py",
      "line_number": 335,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'run_server' may be missing return statement",
      "code_snippet": "def run_server():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "collapse_mermaid.py",
      "line_number": 4,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'collapse_log_to_mermaid' may be missing return statement",
      "code_snippet": "def collapse_log_to_mermaid(log_path: Path, output_path: Path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vault_api_server_simple.py",
      "line_number": 205,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'run_server' may be missing return statement",
      "code_snippet": "def run_server():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "watcher_daemon.py",
      "line_number": 21,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, project_path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "watcher_daemon.py",
      "line_number": 24,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'on_modified' may be missing return statement",
      "code_snippet": "    def on_modified(self, event):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "watcher_daemon.py",
      "line_number": 40,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'watch_project' may be missing return statement",
      "code_snippet": "def watch_project(project_path: str):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 22,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, endpoint, method='get', payload=None, params=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 61,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'run' may be missing return statement",
      "code_snippet": "    def run(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 67,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, parent=None, secret_data=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 115,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 142,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_init_ui' may be missing return statement",
      "code_snippet": "    def _init_ui(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 230,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_create_actions' may be missing return statement",
      "code_snippet": "    def _create_actions(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 258,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_create_menus' may be missing return statement",
      "code_snippet": "    def _create_menus(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 277,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_create_toolbar' may be missing return statement",
      "code_snippet": "    def _create_toolbar(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 283,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_connect_signals' may be missing return statement",
      "code_snippet": "    def _connect_signals(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 327,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'on_api_call_finished' may be missing return statement",
      "code_snippet": "    def on_api_call_finished(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 333,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'show_info_message' may be missing return statement",
      "code_snippet": "    def show_info_message(self, title, message):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 336,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'show_error_message' may be missing return statement",
      "code_snippet": "    def show_error_message(self, message):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 340,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'log_message' may be missing return statement",
      "code_snippet": "    def log_message(self, message):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 343,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'load_initial_data' may be missing return statement",
      "code_snippet": "    def load_initial_data(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 347,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'on_status_received' may be missing return statement",
      "code_snippet": "    def on_status_received(self, data):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 355,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'handle_scan_workspace' may be missing return statement",
      "code_snippet": "    def handle_scan_workspace(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 382,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'handle_project_selected' may be missing return statement",
      "code_snippet": "    def handle_project_selected(self, index):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 407,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'load_secrets_for_project' may be missing return statement",
      "code_snippet": "    def load_secrets_for_project(self, project_id):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 450,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'on_export_success' may be missing return statement",
      "code_snippet": "    def on_export_success(self, data):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 497,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'on_rotation_success' may be missing return statement",
      "code_snippet": "    def on_rotation_success(self, data):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 509,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'handle_scan_project_secrets' may be missing return statement",
      "code_snippet": "    def handle_scan_project_secrets(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 531,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'on_add_secret_success' may be missing return statement",
      "code_snippet": "    def on_add_secret_success(self, data):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 571,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'on_edit_secret_success' may be missing return statement",
      "code_snippet": "    def on_edit_secret_success(self, data):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 603,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'on_delete_secret_success' may be missing return statement",
      "code_snippet": "    def on_delete_secret_success(self, data):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 611,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'handle_configure' may be missing return statement",
      "code_snippet": "    def handle_configure(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 628,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'handle_about' may be missing return statement",
      "code_snippet": "    def handle_about(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 640,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'closeEvent' may be missing return statement",
      "code_snippet": "    def closeEvent(self, event):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 655,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, parent=None, current_url=\"\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_launcher.py",
      "line_number": 7,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'run_command' may be missing return statement",
      "code_snippet": "def run_command(cmd, output_box):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_launcher.py",
      "line_number": 15,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'select_folder' may be missing return statement",
      "code_snippet": "def select_folder():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".vault\\vault_client.py",
      "line_number": 13,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agents\\echo_agent.py",
      "line_number": 11,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id: str, config: Dict[str, Any] = None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agents\\VaultAccessAgent.py",
      "line_number": 17,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, config=None, core_services=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vault_api_server_admin.py",
      "line_number": 57,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'register_function' may be missing return statement",
      "code_snippet": "def register_function(name: str, description: str, endpoint: str, method: str = \"GET\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vault_api_server_admin.py",
      "line_number": 486,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'run_server' may be missing return statement",
      "code_snippet": "def run_server():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\advanced_symbolic_evolution.py",
      "line_number": 127,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, vault_agent: IntelligentVaultAgent,",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\advanced_symbolic_evolution.py",
      "line_number": 692,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_apply_mutation_benefits' may be missing return statement",
      "code_snippet": "    def _apply_mutation_benefits(self, mutation: EvolutionaryMutation):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\advanced_symbolic_evolution.py",
      "line_number": 1009,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\business_enhancement_engine.py",
      "line_number": 85,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, vault_agent: IntelligentVaultAgent, ",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\business_enhancement_engine.py",
      "line_number": 628,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_update_business_metrics_from_discovery' may be missing return statement",
      "code_snippet": "    def _update_business_metrics_from_discovery(self, discovery_results: Dict[str, Any]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\delta_loop.py",
      "line_number": 6,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'delta_loop' may be missing return statement",
      "code_snippet": "def delta_loop(project_path: Path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agents\\VaultTokenAgent.py",
      "line_number": 15,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, config=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_router.py",
      "line_number": 66,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id: str):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_router.py",
      "line_number": 77,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'add_task_start' may be missing return statement",
      "code_snippet": "    def add_task_start(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_router.py",
      "line_number": 82,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'add_task_completion' may be missing return statement",
      "code_snippet": "    def add_task_completion(self, execution_time_ms: int, success: bool):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_router.py",
      "line_number": 97,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_update_load_score' may be missing return statement",
      "code_snippet": "    def _update_load_score(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_router.py",
      "line_number": 112,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, redis_config: Dict[str, Any] = None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\generated_phase_2.1_riskassessmentagent.py",
      "line_number": 23,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id: str, vmc: VantaMasterCoreEnhanced):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\generated_phase_2.1_securityeventmonitor.py",
      "line_number": 23,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id: str, vmc: VantaMasterCoreEnhanced):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\generated_phase_2.1_threatdetectionengine.py",
      "line_number": 23,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id: str, vmc: VantaMasterCoreEnhanced):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\identity_kernel.py",
      "line_number": 70,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id: str, identity_store_path: Optional[str] = None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\identity_kernel.py",
      "line_number": 91,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_load_or_initialize_identity' may be missing return statement",
      "code_snippet": "    def _load_or_initialize_identity(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\identity_kernel.py",
      "line_number": 106,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_initialize_new_identity' may be missing return statement",
      "code_snippet": "    def _initialize_new_identity(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\identity_kernel.py",
      "line_number": 230,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_record_mutation' may be missing return statement",
      "code_snippet": "    def _record_mutation(self, mutation_type: str, description: str, ",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\identity_kernel.py",
      "line_number": 246,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_update_identity_hash' may be missing return statement",
      "code_snippet": "    def _update_identity_hash(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\identity_kernel.py",
      "line_number": 328,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_deserialize_identity' may be missing return statement",
      "code_snippet": "    def _deserialize_identity(self, data: Dict[str, Any]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\identity_kernel.py",
      "line_number": 350,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_save_identity' may be missing return statement",
      "code_snippet": "    def _save_identity(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\intelligent_vault_agent.py",
      "line_number": 42,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id: str = \"intelligent_vault_001\", vault_path: str = \"vault/\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\intelligent_vault_agent.py",
      "line_number": 70,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_initialize_vault_intelligence' may be missing return statement",
      "code_snippet": "    def _initialize_vault_intelligence(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\memory_system.py",
      "line_number": 57,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__post_init__' may be missing return statement",
      "code_snippet": "    def __post_init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\memory_system.py",
      "line_number": 105,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__post_init__' may be missing return statement",
      "code_snippet": "    def __post_init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\memory_system.py",
      "line_number": 119,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, keb_client: KEBClient, memory_ttl_hours: int = 168):  # 7 days default",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\memory_system.py",
      "line_number": 135,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_setup_memory_streams' may be missing return statement",
      "code_snippet": "    def _setup_memory_streams(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\runtime_governance_engine.py",
      "line_number": 116,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id: str, governance_config: Optional[Dict[str, Any]] = None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 121,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, security_config: Dict[str, Any] = None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 849,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\simple_memory_system.py",
      "line_number": 96,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, db_path: str, agent_id: str):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\simple_memory_system.py",
      "line_number": 109,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_init_database' may be missing return statement",
      "code_snippet": "    def _init_database(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\unified_communication.py",
      "line_number": 41,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, ",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\unified_communication.py",
      "line_number": 87,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id: str, agent_type: str, capabilities: List[str] = None,",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\unified_communication.py",
      "line_number": 116,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, keb_client: KEBClient, agent_id: str = \"UnifiedCommunicationLayer\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\unified_communication.py",
      "line_number": 127,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_setup_communication_streams' may be missing return statement",
      "code_snippet": "    def _setup_communication_streams(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\unified_communication.py",
      "line_number": 398,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_handle_agent_message' may be missing return statement",
      "code_snippet": "    def _handle_agent_message(self, stream_message_id: str, message_data: Dict[str, Any]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\unified_communication.py",
      "line_number": 412,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_handle_broadcast_message' may be missing return statement",
      "code_snippet": "    def _handle_broadcast_message(self, stream_message_id: str, message_data: Dict[str, Any]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\unified_communication.py",
      "line_number": 426,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_handle_discovery_message' may be missing return statement",
      "code_snippet": "    def _handle_discovery_message(self, stream_message_id: str, message_data: Dict[str, Any]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\unified_communication.py",
      "line_number": 457,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_handle_health_message' may be missing return statement",
      "code_snippet": "    def _handle_health_message(self, stream_message_id: str, message_data: Dict[str, Any]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\unified_communication.py",
      "line_number": 473,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_handle_typescript_bridge_message' may be missing return statement",
      "code_snippet": "    def _handle_typescript_bridge_message(self, stream_message_id: str, message_data: Dict[str, Any]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\unified_communication.py",
      "line_number": 521,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'register_message_handler' may be missing return statement",
      "code_snippet": "    def register_message_handler(self, agent_id: str, handler: Callable):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\unified_communication.py",
      "line_number": 526,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'unregister_message_handler' may be missing return statement",
      "code_snippet": "    def unregister_message_handler(self, agent_id: str):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "auth\\TokenValidator.py",
      "line_number": 26,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, config=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "examples\\basic_usage.py",
      "line_number": 19,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'example_1_basic_rule_creation' may be missing return statement",
      "code_snippet": "def example_1_basic_rule_creation():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "examples\\basic_usage.py",
      "line_number": 72,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'example_2_global_scope_includes' may be missing return statement",
      "code_snippet": "def example_2_global_scope_includes():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "examples\\basic_usage.py",
      "line_number": 137,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'example_3_library_management' may be missing return statement",
      "code_snippet": "def example_3_library_management():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "examples\\basic_usage.py",
      "line_number": 190,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'example_4_format_export' may be missing return statement",
      "code_snippet": "def example_4_format_export():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "examples\\basic_usage.py",
      "line_number": 258,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'example_5_validation_and_status' may be missing return statement",
      "code_snippet": "def example_5_validation_and_status():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "examples\\basic_usage.py",
      "line_number": 323,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'example_6_standardization_agent' may be missing return statement",
      "code_snippet": "def example_6_standardization_agent():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "examples\\basic_usage.py",
      "line_number": 397,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'main' may be missing return statement",
      "code_snippet": "def main():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mcp_servers\\universal_agent_platform_server.py",
      "line_number": 52,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mcp_servers\\universal_agent_platform_server.py",
      "line_number": 66,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_load_universal_patterns' may be missing return statement",
      "code_snippet": "    def _load_universal_patterns(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mcp_servers\\universal_agent_platform_server.py",
      "line_number": 149,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_load_fullstack_templates' may be missing return statement",
      "code_snippet": "    def _load_fullstack_templates(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\universal_platform_integration.py",
      "line_number": 116,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, vault_agent: IntelligentVaultAgent, ",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "scripts\\project-scanner.py",
      "line_number": 17,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, project_path: str):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "scripts\\project-scanner.py",
      "line_number": 126,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_analyze_npm_dependencies' may be missing return statement",
      "code_snippet": "    def _analyze_npm_dependencies(self, deps: Dict[str, str], tech: Dict[str, set]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "scripts\\project-scanner.py",
      "line_number": 180,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_check_framework_configs' may be missing return statement",
      "code_snippet": "    def _check_framework_configs(self, tech: Dict[str, set]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "scripts\\project-scanner.py",
      "line_number": 333,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'save_analysis' may be missing return statement",
      "code_snippet": "    def save_analysis(self, output_file: Optional[str] = None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mcp_servers\\vanta_architecture_server.py",
      "line_number": 60,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mcp_servers\\vanta_architecture_server.py",
      "line_number": 74,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_load_patterns' may be missing return statement",
      "code_snippet": "    def _load_patterns(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mcp_servers\\vanta_architecture_server.py",
      "line_number": 116,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_load_templates' may be missing return statement",
      "code_snippet": "    def _load_templates(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "secrets_secure\\encrypted_store.py",
      "line_number": 7,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, key_path='secret.key', encrypted_file='secrets.enc'):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "secrets_secure\\encrypted_store.py",
      "line_number": 20,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'encrypt_secrets' may be missing return statement",
      "code_snippet": "    def encrypt_secrets(self, secrets_dict):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_agent_memory_system.py",
      "line_number": 37,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id: str):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cli_enhanced.py",
      "line_number": 113,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_cli_help' may be missing return statement",
      "code_snippet": "    def test_cli_help(self, runner):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cli_enhanced.py",
      "line_number": 120,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_version_command' may be missing return statement",
      "code_snippet": "    def test_version_command(self, runner):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cli_enhanced.py",
      "line_number": 128,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_scan_command_success' may be missing return statement",
      "code_snippet": "    def test_scan_command_success(self, mock_asyncio_run, runner):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cli_enhanced.py",
      "line_number": 146,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_scan_command_json_output' may be missing return statement",
      "code_snippet": "    def test_scan_command_json_output(self, mock_asyncio_run, runner):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cli_enhanced.py",
      "line_number": 157,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_detect_command_success' may be missing return statement",
      "code_snippet": "    def test_detect_command_success(self, mock_asyncio_run, runner):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cli_enhanced.py",
      "line_number": 173,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_export_command_success' may be missing return statement",
      "code_snippet": "    def test_export_command_success(self, mock_asyncio_run, runner):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cli_enhanced.py",
      "line_number": 184,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_rotate_command_success' may be missing return statement",
      "code_snippet": "    def test_rotate_command_success(self, mock_input, mock_asyncio_run, runner):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cli_enhanced.py",
      "line_number": 197,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_status_command_success' may be missing return statement",
      "code_snippet": "    def test_status_command_success(self, mock_asyncio_run, runner):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cli_enhanced.py",
      "line_number": 213,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_command_with_server_option' may be missing return statement",
      "code_snippet": "    def test_command_with_server_option(self, mock_asyncio_run, runner):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cli_enhanced.py",
      "line_number": 221,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_command_with_verbose_option' may be missing return statement",
      "code_snippet": "    def test_command_with_verbose_option(self, mock_asyncio_run, runner):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cli_enhanced.py",
      "line_number": 237,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_scan_no_projects_found' may be missing return statement",
      "code_snippet": "    def test_scan_no_projects_found(self, mock_asyncio_run, runner):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cli_enhanced.py",
      "line_number": 246,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_detect_no_secrets_found' may be missing return statement",
      "code_snippet": "    def test_detect_no_secrets_found(self, mock_asyncio_run, runner):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cli_enhanced.py",
      "line_number": 255,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_export_no_data' may be missing return statement",
      "code_snippet": "    def test_export_no_data(self, mock_asyncio_run, runner):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cli_enhanced.py",
      "line_number": 264,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_api_error_handling' may be missing return statement",
      "code_snippet": "    def test_api_error_handling(self, mock_asyncio_run, runner):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cli_enhanced.py",
      "line_number": 280,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_full_workflow_simulation' may be missing return statement",
      "code_snippet": "    def test_full_workflow_simulation(self, runner):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cursor_rules_sync_agent.py",
      "line_number": 28,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_project_dir' may be missing return statement",
      "code_snippet": "    def test_project_dir(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cursor_rules_sync_agent.py",
      "line_number": 62,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_agent_initialization' may be missing return statement",
      "code_snippet": "    def test_agent_initialization(self, agent):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cursor_rules_sync_agent.py",
      "line_number": 69,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_scan_directory_structure' may be missing return statement",
      "code_snippet": "    def test_scan_directory_structure(self, agent, test_project_dir):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cursor_rules_sync_agent.py",
      "line_number": 94,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_generate_missing_files' may be missing return statement",
      "code_snippet": "    def test_generate_missing_files(self, agent, test_project_dir):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cursor_rules_sync_agent.py",
      "line_number": 128,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_sync_configurations' may be missing return statement",
      "code_snippet": "    def test_sync_configurations(self, agent, test_project_dir):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cursor_rules_sync_agent.py",
      "line_number": 156,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_template_selection' may be missing return statement",
      "code_snippet": "    def test_template_selection(self, agent):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cursor_rules_sync_agent.py",
      "line_number": 174,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_inheritance_detection' may be missing return statement",
      "code_snippet": "    def test_inheritance_detection(self, agent, test_project_dir):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cursor_rules_sync_agent.py",
      "line_number": 216,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_error_handling' may be missing return statement",
      "code_snippet": "    def test_error_handling(self, agent):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cursor_rules_sync_agent.py",
      "line_number": 231,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_dry_run_mode' may be missing return statement",
      "code_snippet": "    def test_dry_run_mode(self, agent, test_project_dir):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cursor_rules_sync_agent.py",
      "line_number": 260,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_symlink_creation' may be missing return statement",
      "code_snippet": "    def test_symlink_creation(self, mock_symlink, agent, test_project_dir):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cursor_rules_sync_agent.py",
      "line_number": 282,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_cache_behavior' may be missing return statement",
      "code_snippet": "    def test_cache_behavior(self, agent, test_project_dir):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 26,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_supported_tools' may be missing return statement",
      "code_snippet": "    def test_supported_tools(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 36,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_create_adapters' may be missing return statement",
      "code_snippet": "    def test_create_adapters(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 44,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_unsupported_tool_error' may be missing return statement",
      "code_snippet": "    def test_unsupported_tool_error(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 88,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_cursor_conversion' may be missing return statement",
      "code_snippet": "    def test_cursor_conversion(self, cursor_adapter, sample_rules):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 99,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_mdc_to_cursor_conversion' may be missing return statement",
      "code_snippet": "    def test_mdc_to_cursor_conversion(self, cursor_adapter):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 113,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_file_extension' may be missing return statement",
      "code_snippet": "    def test_file_extension(self, cursor_adapter):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 141,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_vale_conversion' may be missing return statement",
      "code_snippet": "    def test_vale_conversion(self, vale_adapter, mdc_rules):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 153,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_mdc_to_vale_conversion' may be missing return statement",
      "code_snippet": "    def test_mdc_to_vale_conversion(self, vale_adapter):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 166,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_file_extension' may be missing return statement",
      "code_snippet": "    def test_file_extension(self, vale_adapter):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 189,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_eslint_conversion' may be missing return statement",
      "code_snippet": "    def test_eslint_conversion(self, eslint_adapter, json_rules):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 201,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_file_extension' may be missing return statement",
      "code_snippet": "    def test_file_extension(self, eslint_adapter):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 228,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_prettier_conversion' may be missing return statement",
      "code_snippet": "    def test_prettier_conversion(self, prettier_adapter, formatting_rules):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 243,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_file_extension' may be missing return statement",
      "code_snippet": "    def test_file_extension(self, prettier_adapter):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 270,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_git_hooks_conversion' may be missing return statement",
      "code_snippet": "    def test_git_hooks_conversion(self, git_adapter, git_rules):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 278,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_file_extension' may be missing return statement",
      "code_snippet": "    def test_file_extension(self, git_adapter):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 305,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_editorconfig_conversion' may be missing return statement",
      "code_snippet": "    def test_editorconfig_conversion(self, editor_adapter, editor_rules):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 315,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_file_extension' may be missing return statement",
      "code_snippet": "    def test_file_extension(self, editor_adapter):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 334,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_convert_to_cursor' may be missing return statement",
      "code_snippet": "    def test_convert_to_cursor(self, sample_rules, tmp_path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 344,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_convert_without_output_path' may be missing return statement",
      "code_snippet": "    def test_convert_without_output_path(self, sample_rules):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 351,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_auto_extension_handling' may be missing return statement",
      "code_snippet": "    def test_auto_extension_handling(self, sample_rules, tmp_path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 364,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_invalid_json_in_eslint_rules' may be missing return statement",
      "code_snippet": "    def test_invalid_json_in_eslint_rules(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 385,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_empty_rules_list' may be missing return statement",
      "code_snippet": "    def test_empty_rules_list(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_format_adapters.py",
      "line_number": 398,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_all_adapters_with_mixed_formats' may be missing return statement",
      "code_snippet": "    def test_all_adapters_with_mixed_formats(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_phase6_vault_access.py",
      "line_number": 35,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'event_loop' may be missing return statement",
      "code_snippet": "def event_loop():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_phase6_vault_access.py",
      "line_number": 42,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'setup_test_environment_variables' may be missing return statement",
      "code_snippet": "def setup_test_environment_variables():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_phase6_vault_access.py",
      "line_number": 104,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'vault_access_agent' may be missing return statement",
      "code_snippet": "def vault_access_agent(vault_access_agent_config):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_phase6_vault_access.py",
      "line_number": 373,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_cli_token_generate_success' may be missing return statement",
      "code_snippet": "def test_cli_token_generate_success(cli_runner, mock_api_client):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_phase6_vault_access.py",
      "line_number": 394,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_cli_token_generate_api_error' may be missing return statement",
      "code_snippet": "def test_cli_token_generate_api_error(cli_runner, mock_api_client):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_phase6_vault_access.py",
      "line_number": 414,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_cli_run_with_secrets_env_injection' may be missing return statement",
      "code_snippet": "def test_cli_run_with_secrets_env_injection(cli_runner, mock_api_client):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_phase6_vault_access.py",
      "line_number": 454,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_cli_run_with_secrets_file_injection' may be missing return statement",
      "code_snippet": "def test_cli_run_with_secrets_file_injection(cli_runner, mock_api_client):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 27,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'temp_project' may be missing return statement",
      "code_snippet": "    def temp_project(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 40,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_initialization' may be missing return statement",
      "code_snippet": "    def test_initialization(self, agent, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 46,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_component_classification' may be missing return statement",
      "code_snippet": "    def test_component_classification(self, agent):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 62,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_uap_compliance_checking' may be missing return statement",
      "code_snippet": "    def test_uap_compliance_checking(self, agent):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 86,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_mdc_compliance_checking' may be missing return statement",
      "code_snippet": "    def test_mdc_compliance_checking(self, agent):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 108,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_python_file_scanning' may be missing return statement",
      "code_snippet": "    def test_python_file_scanning(self, agent, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 155,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_rule_file_scanning' may be missing return statement",
      "code_snippet": "    def test_rule_file_scanning(self, agent, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 187,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_config_file_scanning' may be missing return statement",
      "code_snippet": "    def test_config_file_scanning(self, agent, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 217,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_full_codebase_scan' may be missing return statement",
      "code_snippet": "    def test_full_codebase_scan(self, agent, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 282,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_recommendation_generation' may be missing return statement",
      "code_snippet": "    def test_recommendation_generation(self, agent):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 304,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_manifest_export' may be missing return statement",
      "code_snippet": "    def test_manifest_export(self, agent, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 343,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_error_handling_invalid_python' may be missing return statement",
      "code_snippet": "    def test_error_handling_invalid_python(self, agent, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 355,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_recursive_directory_scanning' may be missing return statement",
      "code_snippet": "    def test_recursive_directory_scanning(self, agent, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 385,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_coe_delegation_suggestions' may be missing return statement",
      "code_snippet": "    def test_coe_delegation_suggestions(self, agent):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 418,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_pattern_based_fallback_scanning' may be missing return statement",
      "code_snippet": "    def test_pattern_based_fallback_scanning(self, agent, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 451,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_interface_extraction' may be missing return statement",
      "code_snippet": "    def test_interface_extraction(self, agent, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 495,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_report_generation' may be missing return statement",
      "code_snippet": "    def test_report_generation(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 536,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_report_display' may be missing return statement",
      "code_snippet": "    def test_report_display(self, capsys):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_unified_communication_integration.py",
      "line_number": 49,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id: str):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 33,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'temp_project' may be missing return statement",
      "code_snippet": "    def temp_project(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 55,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_initialization' may be missing return statement",
      "code_snippet": "    def test_initialization(self, rules_system, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 61,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_format_detection' may be missing return statement",
      "code_snippet": "    def test_format_detection(self, rules_system):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 77,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_include_directive_parsing' may be missing return statement",
      "code_snippet": "    def test_include_directive_parsing(self, rules_system):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 108,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_config_loading_and_saving' may be missing return statement",
      "code_snippet": "    def test_config_loading_and_saving(self, rules_system):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 130,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_rule_roots_priority' may be missing return statement",
      "code_snippet": "    def test_rule_roots_priority(self, rules_system, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 160,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_include_resolution_success' may be missing return statement",
      "code_snippet": "    def test_include_resolution_success(self, rules_system, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 197,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_include_resolution_failure' may be missing return statement",
      "code_snippet": "    def test_include_resolution_failure(self, rules_system, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 221,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_rule_library_installation_local' may be missing return statement",
      "code_snippet": "    def test_rule_library_installation_local(self, rules_system, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 240,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_validation_comprehensive' may be missing return statement",
      "code_snippet": "    def test_validation_comprehensive(self, rules_system, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 265,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_git_library_installation' may be missing return statement",
      "code_snippet": "    def test_git_library_installation(self, mock_subprocess, rules_system):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 281,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_http_library_installation' may be missing return statement",
      "code_snippet": "    def test_http_library_installation(self, mock_requests, rules_system, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 296,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_globalrules_sync_generation' may be missing return statement",
      "code_snippet": "    def test_globalrules_sync_generation(self, rules_system, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 321,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_reminder_rule_creation' may be missing return statement",
      "code_snippet": "    def test_reminder_rule_creation(self, rules_system, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 333,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_recursive_include_resolution' may be missing return statement",
      "code_snippet": "    def test_recursive_include_resolution(self, rules_system, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 357,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_error_handling_invalid_yaml' may be missing return statement",
      "code_snippet": "    def test_error_handling_invalid_yaml(self, rules_system, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 366,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_caching_mechanism' may be missing return statement",
      "code_snippet": "    def test_caching_mechanism(self, rules_system, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 387,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'temp_project' may be missing return statement",
      "code_snippet": "    def temp_project(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 395,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_init_command_execution' may be missing return statement",
      "code_snippet": "    def test_init_command_execution(self, temp_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 410,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_status_command_output' may be missing return statement",
      "code_snippet": "    def test_status_command_output(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 430,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'complex_project' may be missing return statement",
      "code_snippet": "    def complex_project(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 450,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_full_workflow_integration' may be missing return statement",
      "code_snippet": "    def test_full_workflow_integration(self, complex_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_vanta_global_rules.py",
      "line_number": 517,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_error_recovery_scenarios' may be missing return statement",
      "code_snippet": "    def test_error_recovery_scenarios(self, complex_project):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\production_vault_integration.py",
      "line_number": 49,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, config: Dict[str, Any] = None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "utils\\SecretFetchLogger.py",
      "line_number": 10,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, config=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\update-gyp.py",
      "line_number": 45,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'safe_extract' may be missing return statement",
      "code_snippet": "            def safe_extract(tar, path=\".\", members=None, *, numeric_owner=False):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\test_gyp.py",
      "line_number": 147,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'print_configuration_info' may be missing return statement",
      "code_snippet": "def print_configuration_info():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\test_gyp.py",
      "line_number": 169,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, formats, tests, gyp_options, verbose):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\test_gyp.py",
      "line_number": 182,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'run' may be missing return statement",
      "code_snippet": "    def run(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\test_gyp.py",
      "line_number": 196,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'run_test' may be missing return statement",
      "code_snippet": "    def run_test(self, test, fmt, i):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\test_gyp.py",
      "line_number": 229,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'print_' may be missing return statement",
      "code_snippet": "    def print_(self, msg):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\test_gyp.py",
      "line_number": 238,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'erase_current_line' may be missing return statement",
      "code_snippet": "    def erase_current_line(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\test_gyp.py",
      "line_number": 243,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'print_results' may be missing return statement",
      "code_snippet": "    def print_results(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\graphviz.py",
      "line_number": 44,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteGraph' may be missing return statement",
      "code_snippet": "def WriteGraph(edges):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\pretty_gyp.py",
      "line_number": 118,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'prettyprint_input' may be missing return statement",
      "code_snippet": "def prettyprint_input(lines):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\pretty_sln.py",
      "line_number": 24,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'BuildProject' may be missing return statement",
      "code_snippet": "def BuildProject(project, built, projects, deps):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\pretty_sln.py",
      "line_number": 109,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'PrintDependencies' may be missing return statement",
      "code_snippet": "def PrintDependencies(projects, deps):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\pretty_sln.py",
      "line_number": 126,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'PrintBuildOrder' may be missing return statement",
      "code_snippet": "def PrintBuildOrder(projects, deps):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\pretty_sln.py",
      "line_number": 140,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'PrintVCProj' may be missing return statement",
      "code_snippet": "def PrintVCProj(projects):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 35,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "        def __init__(self, args):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 39,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'quit' may be missing return statement",
      "code_snippet": "        def quit(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 43,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "        def __init__(self, text):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 47,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'setData' may be missing return statement",
      "code_snippet": "        def setData(self, role, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 71,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'window' may be missing return statement",
      "code_snippet": "def window(qapp):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 80,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_window_creation' may be missing return statement",
      "code_snippet": "    def test_window_creation(self, window):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 86,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_configure_dialog_opens' may be missing return statement",
      "code_snippet": "    def test_configure_dialog_opens(self, window, qtbot):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 94,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_about_dialog_opens' may be missing return statement",
      "code_snippet": "    def test_about_dialog_opens(self, window, qtbot):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 101,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_load_initial_data_calls_api' may be missing return statement",
      "code_snippet": "    def test_load_initial_data_calls_api(self, mock_api_thread_class, window):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 119,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_on_status_received_updates_ui' may be missing return statement",
      "code_snippet": "    def test_on_status_received_updates_ui(self, mock_api_thread_class, window):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 128,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_handle_scan_workspace_calls_api' may be missing return statement",
      "code_snippet": "    def test_handle_scan_workspace_calls_api(self, mock_api_thread_class, window):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 138,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_on_projects_received_populates_tree' may be missing return statement",
      "code_snippet": "    def test_on_projects_received_populates_tree(self, window):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 150,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_handle_project_selected_loads_secrets' may be missing return statement",
      "code_snippet": "    def test_handle_project_selected_loads_secrets(self, mock_api_thread_class, window):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 174,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_on_secrets_received_populates_list' may be missing return statement",
      "code_snippet": "    def test_on_secrets_received_populates_list(self, window):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 186,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_handle_configure_dialog_opens_and_updates_url' may be missing return statement",
      "code_snippet": "    def test_handle_configure_dialog_opens_and_updates_url(self, mock_config_dialog_class, window):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 204,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_handle_about_shows_dialog' may be missing return statement",
      "code_snippet": "    def test_handle_about_shows_dialog(self, mock_about_box, window):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 211,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_handle_export_secrets_success' may be missing return statement",
      "code_snippet": "    def test_handle_export_secrets_success(self, mock_open_file, mock_save_dialog, mock_api_thread_class, window):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 236,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_handle_rotate_secret_success' may be missing return statement",
      "code_snippet": "    def test_handle_rotate_secret_success(self, mock_msg_box_question, mock_api_thread_class, window):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 265,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_handle_add_secret_success' may be missing return statement",
      "code_snippet": "    def test_handle_add_secret_success(self, mock_api_thread_class, mock_secret_dialog_class, window):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 299,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_handle_edit_secret_success' may be missing return statement",
      "code_snippet": "    def test_handle_edit_secret_success(self, mock_api_thread_class, mock_secret_dialog_class, window):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 337,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_handle_delete_secret_success' may be missing return statement",
      "code_snippet": "    def test_handle_delete_secret_success(self, mock_api_thread_class, mock_msg_box_question, window):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 370,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_config_dialog_gets_url' may be missing return statement",
      "code_snippet": "    def test_config_dialog_gets_url(self, qapp):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 377,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_secret_edit_dialog_get_data' may be missing return statement",
      "code_snippet": "    def test_secret_edit_dialog_get_data(self, qapp):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 386,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_secret_edit_dialog_validation' may be missing return statement",
      "code_snippet": "    def test_secret_edit_dialog_validation(self, mock_warning, qapp):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common.py",
      "line_number": 19,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, func):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common.py",
      "line_number": 40,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ExceptionAppend' may be missing return statement",
      "code_snippet": "def ExceptionAppend(e, msg):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common.py",
      "line_number": 349,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "        def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common.py",
      "line_number": 376,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'close' may be missing return statement",
      "code_snippet": "        def close(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common.py",
      "line_number": 419,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'write' may be missing return statement",
      "code_snippet": "        def write(self, s):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common.py",
      "line_number": 425,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'EnsureDirExists' may be missing return statement",
      "code_snippet": "def EnsureDirExists(path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common.py",
      "line_number": 522,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, iterable=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common.py",
      "line_number": 535,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'add' may be missing return statement",
      "code_snippet": "    def add(self, key):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common.py",
      "line_number": 541,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'discard' may be missing return statement",
      "code_snippet": "    def discard(self, key):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common.py",
      "line_number": 547,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__iter__' may be missing return statement",
      "code_snippet": "    def __iter__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common.py",
      "line_number": 554,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__reversed__' may be missing return statement",
      "code_snippet": "    def __reversed__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common.py",
      "line_number": 580,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'update' may be missing return statement",
      "code_snippet": "    def update(self, iterable):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common.py",
      "line_number": 589,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, nodes):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common_test.py",
      "line_number": 53,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'setUp' may be missing return statement",
      "code_snippet": "    def setUp(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common_test.py",
      "line_number": 56,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'tearDown' may be missing return statement",
      "code_snippet": "    def tearDown(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common_test.py",
      "line_number": 59,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'assertFlavor' may be missing return statement",
      "code_snippet": "    def assertFlavor(self, expected, argument, param):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common_test.py",
      "line_number": 63,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_platform_default' may be missing return statement",
      "code_snippet": "    def test_platform_default(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common_test.py",
      "line_number": 73,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_param' may be missing return statement",
      "code_snippet": "    def test_param(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\easy_xml.py",
      "line_number": 60,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_ConstructContentList' may be missing return statement",
      "code_snippet": "def _ConstructContentList(xml_parts, specification, pretty, level=0):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\easy_xml.py",
      "line_number": 110,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteXmlIfChanged' may be missing return statement",
      "code_snippet": "def WriteXmlIfChanged(content, path, encoding=\"utf-8\", pretty=False,",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\easy_xml_test.py",
      "line_number": 16,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'setUp' may be missing return statement",
      "code_snippet": "    def setUp(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\easy_xml_test.py",
      "line_number": 19,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_EasyXml_simple' may be missing return statement",
      "code_snippet": "    def test_EasyXml_simple(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\easy_xml_test.py",
      "line_number": 30,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_EasyXml_simple_with_attributes' may be missing return statement",
      "code_snippet": "    def test_EasyXml_simple_with_attributes(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\easy_xml_test.py",
      "line_number": 36,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_EasyXml_escaping' may be missing return statement",
      "code_snippet": "    def test_EasyXml_escaping(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\easy_xml_test.py",
      "line_number": 46,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_EasyXml_pretty' may be missing return statement",
      "code_snippet": "    def test_EasyXml_pretty(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\easy_xml_test.py",
      "line_number": 63,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_EasyXml_complex' may be missing return statement",
      "code_snippet": "    def test_EasyXml_complex(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\flock_tool.py",
      "line_number": 16,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'main' may be missing return statement",
      "code_snippet": "def main(args):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\flock_tool.py",
      "line_number": 24,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'Dispatch' may be missing return statement",
      "code_snippet": "    def Dispatch(self, args):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input_test.py",
      "line_number": 14,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'setUp' may be missing return statement",
      "code_snippet": "    def setUp(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input_test.py",
      "line_number": 19,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_create_dependency' may be missing return statement",
      "code_snippet": "    def _create_dependency(self, dependent, dependency):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input_test.py",
      "line_number": 23,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_no_cycle_empty_graph' may be missing return statement",
      "code_snippet": "    def test_no_cycle_empty_graph(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input_test.py",
      "line_number": 27,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_no_cycle_line' may be missing return statement",
      "code_snippet": "    def test_no_cycle_line(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input_test.py",
      "line_number": 35,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_no_cycle_dag' may be missing return statement",
      "code_snippet": "    def test_no_cycle_dag(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input_test.py",
      "line_number": 43,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_cycle_self_reference' may be missing return statement",
      "code_snippet": "    def test_cycle_self_reference(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input_test.py",
      "line_number": 50,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_cycle_two_nodes' may be missing return statement",
      "code_snippet": "    def test_cycle_two_nodes(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input_test.py",
      "line_number": 63,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_two_cycles' may be missing return statement",
      "code_snippet": "    def test_two_cycles(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input_test.py",
      "line_number": 75,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_big_cycle' may be missing return statement",
      "code_snippet": "    def test_big_cycle(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 26,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'main' may be missing return statement",
      "code_snippet": "def main(args):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 133,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_ConvertToBinary' may be missing return statement",
      "code_snippet": "    def _ConvertToBinary(self, dest):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 176,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ExecCopyInfoPlist' may be missing return statement",
      "code_snippet": "    def ExecCopyInfoPlist(self, source, dest, convert_to_binary, *keys):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 291,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ExecPackageIosFramework' may be missing return statement",
      "code_snippet": "    def ExecPackageIosFramework(self, framework):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 338,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_Relink' may be missing return statement",
      "code_snippet": "    def _Relink(self, dest, link):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 345,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ExecCompileIosFrameworkHeaderMap' may be missing return statement",
      "code_snippet": "    def ExecCompileIosFrameworkHeaderMap(self, out, framework, *all_headers):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 355,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ExecCopyIosFrameworkHeaders' may be missing return statement",
      "code_snippet": "    def ExecCopyIosFrameworkHeaders(self, framework, *copy_headers):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 362,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ExecCompileXcassets' may be missing return statement",
      "code_snippet": "    def ExecCompileXcassets(self, keys, *inputs):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 434,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ExecMergeInfoPlist' may be missing return statement",
      "code_snippet": "    def ExecMergeInfoPlist(self, output, *inputs):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 442,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ExecCodeSignBundle' may be missing return statement",
      "code_snippet": "    def ExecCodeSignBundle(self, key, entitlements, provisioning, path, preserve):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 572,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_MergePlist' may be missing return statement",
      "code_snippet": "    def _MergePlist(self, merged_plist, plist):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 696,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteHmap' may be missing return statement",
      "code_snippet": "def WriteHmap(output_name, filelist):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSNew.py",
      "line_number": 78,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, path, name=None, entries=None, guid=None, items=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSNew.py",
      "line_number": 118,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSNew.py",
      "line_number": 163,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'set_dependencies' may be missing return statement",
      "code_snippet": "    def set_dependencies(self, dependencies):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSNew.py",
      "line_number": 183,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'set_msbuild_toolset' may be missing return statement",
      "code_snippet": "    def set_msbuild_toolset(self, msbuild_toolset):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSNew.py",
      "line_number": 193,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSNew.py",
      "line_number": 230,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'Write' may be missing return statement",
      "code_snippet": "    def Write(self, writer=gyp.common.WriteOnDiff):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSProject.py",
      "line_number": 15,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, name, attrs=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSProject.py",
      "line_number": 37,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, name, contents=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSProject.py",
      "line_number": 54,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, project_path, version, name, guid=None, platforms=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSProject.py",
      "line_number": 84,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AddToolFile' may be missing return statement",
      "code_snippet": "    def AddToolFile(self, path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSProject.py",
      "line_number": 122,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AddConfig' may be missing return statement",
      "code_snippet": "    def AddConfig(self, name, attrs=None, tools=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSProject.py",
      "line_number": 133,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddFilesToNode' may be missing return statement",
      "code_snippet": "    def _AddFilesToNode(self, parent, files):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSProject.py",
      "line_number": 151,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AddFiles' may be missing return statement",
      "code_snippet": "    def AddFiles(self, files):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSProject.py",
      "line_number": 165,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AddFileConfig' may be missing return statement",
      "code_snippet": "    def AddFileConfig(self, path, config, attrs=None, tools=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSProject.py",
      "line_number": 186,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteIfChanged' may be missing return statement",
      "code_snippet": "    def WriteIfChanged(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 271,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'LoadBuildFileIncludesIntoDict' may be missing return statement",
      "code_snippet": "def LoadBuildFileIncludesIntoDict(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 313,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'LoadBuildFileIncludesIntoList' may be missing return statement",
      "code_snippet": "def LoadBuildFileIncludesIntoList(sublist, sublist_path, data, aux_data, check):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 325,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ProcessToolsetsInDict' may be missing return statement",
      "code_snippet": "def ProcessToolsetsInDict(data):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 567,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 607,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'LoadTargetBuildFilesParallel' may be missing return statement",
      "code_snippet": "def LoadTargetBuildFilesParallel(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1256,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'LoadAutomaticVariablesFromDict' may be missing return statement",
      "code_snippet": "def LoadAutomaticVariablesFromDict(variables, the_dict):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1264,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'LoadVariablesFromVariablesDict' may be missing return statement",
      "code_snippet": "def LoadVariablesFromVariablesDict(variables, the_dict, the_dict_key):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1292,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ProcessVariablesAndConditionsInDict' may be missing return statement",
      "code_snippet": "def ProcessVariablesAndConditionsInDict(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1409,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ProcessVariablesAndConditionsInList' may be missing return statement",
      "code_snippet": "def ProcessVariablesAndConditionsInList(the_list, phase, variables, build_file):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1472,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'QualifyDependencies' may be missing return statement",
      "code_snippet": "def QualifyDependencies(targets):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1521,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ExpandWildcardDependencies' may be missing return statement",
      "code_snippet": "def ExpandWildcardDependencies(targets, data):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1609,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'RemoveDuplicateDependencies' may be missing return statement",
      "code_snippet": "def RemoveDuplicateDependencies(targets):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1625,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'RemoveSelfDependencies' may be missing return statement",
      "code_snippet": "def RemoveSelfDependencies(targets):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1644,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'RemoveLinkDependenciesFromNoneTargets' may be missing return statement",
      "code_snippet": "def RemoveLinkDependenciesFromNoneTargets(targets):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1671,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, ref):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1737,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'Visit' may be missing return statement",
      "code_snippet": "        def Visit(node, path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2000,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'VerifyNoGYPFileCircularDependencies' may be missing return statement",
      "code_snippet": "def VerifyNoGYPFileCircularDependencies(targets):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2060,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'DoDependentSettings' may be missing return statement",
      "code_snippet": "def DoDependentSettings(key, flat_list, targets, dependency_nodes):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2092,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AdjustStaticLibraryDependencies' may be missing return statement",
      "code_snippet": "def AdjustStaticLibraryDependencies(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2294,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'MergeDicts' may be missing return statement",
      "code_snippet": "def MergeDicts(to, fro, to_file, fro_file):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2436,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'SetUpConfigurations' may be missing return statement",
      "code_snippet": "def SetUpConfigurations(target, target_dict):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2522,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ProcessListFiltersInDict' may be missing return statement",
      "code_snippet": "def ProcessListFiltersInDict(name, the_dict):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2692,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ProcessListFiltersInList' may be missing return statement",
      "code_snippet": "def ProcessListFiltersInList(name, the_list):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2700,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ValidateTargetType' may be missing return statement",
      "code_snippet": "def ValidateTargetType(target, target_dict):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2734,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ValidateRulesInTarget' may be missing return statement",
      "code_snippet": "def ValidateRulesInTarget(target, target_dict, extra_sources_for_rules):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2836,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ValidateActionsInTarget' may be missing return statement",
      "code_snippet": "def ValidateActionsInTarget(target, target_dict, build_file):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2855,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'TurnIntIntoStrInDict' may be missing return statement",
      "code_snippet": "def TurnIntIntoStrInDict(the_dict):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2874,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'TurnIntIntoStrInList' may be missing return statement",
      "code_snippet": "def TurnIntIntoStrInList(the_list):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2920,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'VerifyNoCollidingTargets' may be missing return statement",
      "code_snippet": "def VerifyNoCollidingTargets(targets):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2949,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'SetGeneratorGlobals' may be missing return statement",
      "code_snippet": "def SetGeneratorGlobals(generator_input_info):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings_test.py",
      "line_number": 16,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'setUp' may be missing return statement",
      "code_snippet": "    def setUp(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings_test.py",
      "line_number": 19,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_ExpectedWarnings' may be missing return statement",
      "code_snippet": "    def _ExpectedWarnings(self, expected):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings_test.py",
      "line_number": 26,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'testValidateMSVSSettings_tool_names' may be missing return statement",
      "code_snippet": "    def testValidateMSVSSettings_tool_names(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings_test.py",
      "line_number": 45,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'testValidateMSVSSettings_settings' may be missing return statement",
      "code_snippet": "    def testValidateMSVSSettings_settings(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings_test.py",
      "line_number": 298,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'testValidateMSBuildSettings_settings' may be missing return statement",
      "code_snippet": "    def testValidateMSBuildSettings_settings(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings_test.py",
      "line_number": 589,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'testConvertToMSBuildSettings_empty' may be missing return statement",
      "code_snippet": "    def testConvertToMSBuildSettings_empty(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings_test.py",
      "line_number": 599,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'testConvertToMSBuildSettings_minimal' may be missing return statement",
      "code_snippet": "    def testConvertToMSBuildSettings_minimal(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings_test.py",
      "line_number": 631,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'testConvertToMSBuildSettings_warnings' may be missing return statement",
      "code_snippet": "    def testConvertToMSBuildSettings_warnings(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings_test.py",
      "line_number": 692,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'testConvertToMSBuildSettings_full_synthetic' may be missing return statement",
      "code_snippet": "    def testConvertToMSBuildSettings_full_synthetic(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings_test.py",
      "line_number": 1143,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'testConvertToMSBuildSettings_actual' may be missing return statement",
      "code_snippet": "    def testConvertToMSBuildSettings_actual(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSToolFile.py",
      "line_number": 13,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, tool_file_path, name):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSToolFile.py",
      "line_number": 24,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AddCustomBuildRule' may be missing return statement",
      "code_snippet": "    def AddCustomBuildRule(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSToolFile.py",
      "line_number": 50,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteIfChanged' may be missing return statement",
      "code_snippet": "    def WriteIfChanged(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSUserFile.py",
      "line_number": 59,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, user_file_path, version, name):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSUserFile.py",
      "line_number": 72,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AddConfig' may be missing return statement",
      "code_snippet": "    def AddConfig(self, name):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSUserFile.py",
      "line_number": 80,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AddDebugSettings' may be missing return statement",
      "code_snippet": "    def AddDebugSettings(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSUserFile.py",
      "line_number": 140,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteIfChanged' may be missing return statement",
      "code_snippet": "    def WriteIfChanged(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSVersion.py",
      "line_number": 22,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 43,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, msvs_name, msbuild_name):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 48,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddTool' may be missing return statement",
      "code_snippet": "def _AddTool(tool):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 70,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ValidateMSVS' may be missing return statement",
      "code_snippet": "    def ValidateMSVS(self, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 80,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ValidateMSBuild' may be missing return statement",
      "code_snippet": "    def ValidateMSBuild(self, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 108,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ValidateMSVS' may be missing return statement",
      "code_snippet": "    def ValidateMSVS(self, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 112,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ValidateMSBuild' may be missing return statement",
      "code_snippet": "    def ValidateMSBuild(self, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 124,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ValidateMSVS' may be missing return statement",
      "code_snippet": "    def ValidateMSVS(self, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 128,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ValidateMSBuild' may be missing return statement",
      "code_snippet": "    def ValidateMSBuild(self, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 143,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_Validate' may be missing return statement",
      "code_snippet": "    def _Validate(self, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 147,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ValidateMSVS' may be missing return statement",
      "code_snippet": "    def ValidateMSVS(self, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 150,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ValidateMSBuild' may be missing return statement",
      "code_snippet": "    def ValidateMSBuild(self, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 161,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, msbuild_base=10):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 165,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ValidateMSVS' may be missing return statement",
      "code_snippet": "    def ValidateMSVS(self, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 169,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ValidateMSBuild' may be missing return statement",
      "code_snippet": "    def ValidateMSBuild(self, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 191,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, label_list, new=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 198,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ValidateMSVS' may be missing return statement",
      "code_snippet": "    def ValidateMSVS(self, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 202,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ValidateMSBuild' may be missing return statement",
      "code_snippet": "    def ValidateMSBuild(self, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 234,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_Same' may be missing return statement",
      "code_snippet": "def _Same(tool, name, setting_type):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 245,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_Renamed' may be missing return statement",
      "code_snippet": "def _Renamed(tool, msvs_name, msbuild_name, setting_type):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 255,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_Translate' may be missing return statement",
      "code_snippet": "    def _Translate(value, msbuild_settings):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 264,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_Moved' may be missing return statement",
      "code_snippet": "def _Moved(tool, settings_name, msbuild_tool_name, setting_type):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 270,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_MovedAndRenamed' may be missing return statement",
      "code_snippet": "def _MovedAndRenamed(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 283,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_Translate' may be missing return statement",
      "code_snippet": "    def _Translate(value, msbuild_settings):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 293,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_MSVSOnly' may be missing return statement",
      "code_snippet": "def _MSVSOnly(tool, name, setting_type):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 302,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_Translate' may be missing return statement",
      "code_snippet": "    def _Translate(unused_value, unused_msbuild_settings):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 310,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_MSBuildOnly' may be missing return statement",
      "code_snippet": "def _MSBuildOnly(tool, name, setting_type):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 319,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_Translate' may be missing return statement",
      "code_snippet": "    def _Translate(value, msbuild_settings):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 328,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_ConvertedToAdditionalOption' may be missing return statement",
      "code_snippet": "def _ConvertedToAdditionalOption(tool, msvs_name, flag):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 337,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_Translate' may be missing return statement",
      "code_snippet": "    def _Translate(value, msbuild_settings):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 350,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_CustomGeneratePreprocessedFile' may be missing return statement",
      "code_snippet": "def _CustomGeneratePreprocessedFile(tool, msvs_name):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 351,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_Translate' may be missing return statement",
      "code_snippet": "    def _Translate(value, msbuild_settings):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 384,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_ValidateExclusionSetting' may be missing return statement",
      "code_snippet": "def _ValidateExclusionSetting(setting, settings, error_msg, stderr=sys.stderr):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 493,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ValidateMSVSSettings' may be missing return statement",
      "code_snippet": "def ValidateMSVSSettings(settings, stderr=sys.stderr):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 504,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ValidateMSBuildSettings' may be missing return statement",
      "code_snippet": "def ValidateMSBuildSettings(settings, stderr=sys.stderr):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSSettings.py",
      "line_number": 515,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_ValidateSettings' may be missing return statement",
      "code_snippet": "def _ValidateSettings(validators, settings, stderr):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\ninja_syntax.py",
      "line_number": 20,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, output, width=78):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\ninja_syntax.py",
      "line_number": 24,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'newline' may be missing return statement",
      "code_snippet": "    def newline(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\ninja_syntax.py",
      "line_number": 27,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'comment' may be missing return statement",
      "code_snippet": "    def comment(self, text):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\ninja_syntax.py",
      "line_number": 38,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'pool' may be missing return statement",
      "code_snippet": "    def pool(self, name, depth):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\ninja_syntax.py",
      "line_number": 42,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'rule' may be missing return statement",
      "code_snippet": "    def rule(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\ninja_syntax.py",
      "line_number": 106,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'include' may be missing return statement",
      "code_snippet": "    def include(self, path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\ninja_syntax.py",
      "line_number": 109,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'subninja' may be missing return statement",
      "code_snippet": "    def subninja(self, path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\ninja_syntax.py",
      "line_number": 112,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'default' may be missing return statement",
      "code_snippet": "    def default(self, paths):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\ninja_syntax.py",
      "line_number": 124,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_line' may be missing return statement",
      "code_snippet": "    def _line(self, text, indent=0):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 205,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, spec, generator_flags):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 312,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "        def __init__(self, parent, field, base_path, append=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 628,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_GetDefFileAsLdflags' may be missing return statement",
      "code_snippet": "    def _GetDefFileAsLdflags(self, ldflags, gyp_to_build_path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 1032,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 1236,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'VerifyMissingSources' may be missing return statement",
      "code_snippet": "def VerifyMissingSources(sources, build_dir, generator_flags, gyp_to_ninja):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 1255,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'CalculateCommonVariables' may be missing return statement",
      "code_snippet": "def CalculateCommonVariables(default_variables, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\secret_lifecycle_engine.py",
      "line_number": 78,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, identity_kernel: IdentityKernel, vault_path: str = \"vault/\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\secret_lifecycle_engine.py",
      "line_number": 101,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_initialize_secret_reasoning' may be missing return statement",
      "code_snippet": "    def _initialize_secret_reasoning(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 50,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, default, mac, iphonesimulator, iphoneos):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 165,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, spec):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 190,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_ConvertConditionalKeys' may be missing return statement",
      "code_snippet": "    def _ConvertConditionalKeys(self, configname):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 216,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_Appendf' may be missing return statement",
      "code_snippet": "    def _Appendf(self, lst, test_key, format_str, default=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 222,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_WarnUnimplemented' may be missing return statement",
      "code_snippet": "    def _WarnUnimplemented(self, test_key):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 557,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AppendPlatformVersionMinFlags' may be missing return statement",
      "code_snippet": "    def _AppendPlatformVersionMinFlags(self, lst):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 754,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddObjectiveCGarbageCollectionFlags' may be missing return statement",
      "code_snippet": "    def _AddObjectiveCGarbageCollectionFlags(self, flags):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 761,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddObjectiveCARCFlags' may be missing return statement",
      "code_snippet": "    def _AddObjectiveCARCFlags(self, flags):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 765,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddObjectiveCMissingPropertySynthesisFlags' may be missing return statement",
      "code_snippet": "    def _AddObjectiveCMissingPropertySynthesisFlags(self, flags):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 1394,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 1578,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'MergeGlobalXcodeSettingsToSpec' may be missing return statement",
      "code_snippet": "def MergeGlobalXcodeSettingsToSpec(global_dict, spec):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 1614,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'GetMacBundleResources' may be missing return statement",
      "code_snippet": "def GetMacBundleResources(product_dir, xcode_settings, resources):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xml_fix.py",
      "line_number": 16,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_Replacement_write_data' may be missing return statement",
      "code_snippet": "def _Replacement_write_data(writer, data, is_attrib=False):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xml_fix.py",
      "line_number": 25,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_Replacement_writexml' may be missing return statement",
      "code_snippet": "def _Replacement_writexml(self, writer, indent=\"\", addindent=\"\", newl=\"\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xml_fix.py",
      "line_number": 50,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xml_fix.py",
      "line_number": 58,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'Cleanup' may be missing return statement",
      "code_snippet": "    def Cleanup(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xml_fix.py",
      "line_number": 64,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__del__' may be missing return statement",
      "code_snippet": "    def __del__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\__init__.py",
      "line_number": 28,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'DebugOutput' may be missing return statement",
      "code_snippet": "def DebugOutput(mode, message, *args):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\__init__.py",
      "line_number": 288,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, usage):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\__init__.py",
      "line_number": 292,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'add_argument' may be missing return statement",
      "code_snippet": "    def add_argument(self, *args, **kw):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\analyzer.py",
      "line_number": 151,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddSources' may be missing return statement",
      "code_snippet": "def _AddSources(sources, base_path, base_path_components, result):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\analyzer.py",
      "line_number": 175,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_ExtractSourcesFromAction' may be missing return statement",
      "code_snippet": "def _ExtractSourcesFromAction(action, base_path, base_path_components, results):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\analyzer.py",
      "line_number": 238,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, name):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\analyzer.py",
      "line_number": 259,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\analyzer.py",
      "line_number": 614,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'CalculateVariables' may be missing return statement",
      "code_snippet": "def CalculateVariables(default_variables, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\analyzer.py",
      "line_number": 632,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 290,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, properties=None, id=None, parent=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 403,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ComputeIDs' may be missing return statement",
      "code_snippet": "    def ComputeIDs(self, recursive=True, overwrite=True, seed_hash=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 418,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_HashUpdate' may be missing return statement",
      "code_snippet": "        def _HashUpdate(hash, data):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 467,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'EnsureNoIDCollisions' may be missing return statement",
      "code_snippet": "    def EnsureNoIDCollisions(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 584,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_XCPrint' may be missing return statement",
      "code_snippet": "    def _XCPrint(self, file, tabs, line):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 659,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_XCKVPrint' may be missing return statement",
      "code_snippet": "    def _XCKVPrint(self, file, tabs, key, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 722,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'Print' may be missing return statement",
      "code_snippet": "    def Print(self, file=sys.stdout):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 870,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'SetProperty' may be missing return statement",
      "code_snippet": "    def SetProperty(self, key, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 873,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'DelProperty' may be missing return statement",
      "code_snippet": "    def DelProperty(self, key):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 877,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AppendProperty' may be missing return statement",
      "code_snippet": "    def AppendProperty(self, key, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 910,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'VerifyHasRequiredProperties' may be missing return statement",
      "code_snippet": "    def VerifyHasRequiredProperties(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 922,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_SetDefaultsFromSchema' may be missing return statement",
      "code_snippet": "    def _SetDefaultsFromSchema(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 968,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, properties=None, id=None, parent=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1178,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, properties=None, id=None, parent=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1206,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddChildToDicts' may be missing return statement",
      "code_snippet": "    def _AddChildToDicts(self, child):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1227,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AppendChild' may be missing return statement",
      "code_snippet": "    def AppendChild(self, child):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1408,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'TakeOverOnlyChild' may be missing return statement",
      "code_snippet": "    def TakeOverOnlyChild(self, recurse=False):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1488,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'SortGroup' may be missing return statement",
      "code_snippet": "    def SortGroup(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1549,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, properties=None, id=None, parent=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1666,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'SetBuildSetting' may be missing return statement",
      "code_snippet": "    def SetBuildSetting(self, key, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1670,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AppendBuildSetting' may be missing return statement",
      "code_snippet": "    def AppendBuildSetting(self, key, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1675,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'DelBuildSetting' may be missing return statement",
      "code_snippet": "    def DelBuildSetting(self, key):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1679,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'SetBaseConfiguration' may be missing return statement",
      "code_snippet": "    def SetBaseConfiguration(self, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1775,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'SetBuildSetting' may be missing return statement",
      "code_snippet": "    def SetBuildSetting(self, key, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1783,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AppendBuildSetting' may be missing return statement",
      "code_snippet": "    def AppendBuildSetting(self, key, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1791,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'DelBuildSetting' may be missing return statement",
      "code_snippet": "    def DelBuildSetting(self, key):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1799,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'SetBaseConfiguration' may be missing return statement",
      "code_snippet": "    def SetBaseConfiguration(self, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1867,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, properties=None, id=None, parent=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1876,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'FileGroup' may be missing return statement",
      "code_snippet": "    def FileGroup(self, path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1884,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddPathToDict' may be missing return statement",
      "code_snippet": "    def _AddPathToDict(self, pbxbuildfile, path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1894,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddBuildFileToDicts' may be missing return statement",
      "code_snippet": "    def _AddBuildFileToDicts(self, pbxbuildfile, path=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1953,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AppendBuildFile' may be missing return statement",
      "code_snippet": "    def AppendBuildFile(self, pbxbuildfile, path=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1962,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AddFile' may be missing return statement",
      "code_snippet": "    def AddFile(self, path, settings=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 2107,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'SetDestination' may be missing return statement",
      "code_snippet": "    def SetDestination(self, path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 2342,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 2370,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AddDependency' may be missing return statement",
      "code_snippet": "    def AddDependency(self, other):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 2489,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 2688,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AddDependency' may be missing return statement",
      "code_snippet": "    def AddDependency(self, other):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 2769,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, properties=None, id=None, parent=None, path=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 2886,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'RootGroupsTakeOverOnlyChildren' may be missing return statement",
      "code_snippet": "    def RootGroupsTakeOverOnlyChildren(self, recurse=False):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 2893,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'SortGroups' may be missing return statement",
      "code_snippet": "    def SortGroups(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 3054,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_SetUpProductReferences' may be missing return statement",
      "code_snippet": "    def _SetUpProductReferences(self, other_pbxproject, product_group, project_ref):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 3141,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ComputeIDs' may be missing return statement",
      "code_snippet": "    def ComputeIDs(self, recursive=True, overwrite=True, hash=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 3148,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'Print' may be missing return statement",
      "code_snippet": "    def Print(self, file=sys.stdout):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 3170,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_PrintObjects' may be missing return statement",
      "code_snippet": "    def _PrintObjects(self, file):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\win_tool.py",
      "line_number": 28,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'main' may be missing return statement",
      "code_snippet": "def main(args):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\win_tool.py",
      "line_number": 88,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ExecStamp' may be missing return statement",
      "code_snippet": "    def ExecStamp(self, path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\win_tool.py",
      "line_number": 92,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ExecRecursiveMirror' may be missing return statement",
      "code_snippet": "    def ExecRecursiveMirror(self, source, dest):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\win_tool.py",
      "line_number": 97,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_on_error' may be missing return statement",
      "code_snippet": "                def _on_error(fn, path, excinfo):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\win_tool.py",
      "line_number": 230,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'dump' may be missing return statement",
      "code_snippet": "                def dump(filename):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\win_tool.py",
      "line_number": 262,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'ExecManifestToRc' may be missing return statement",
      "code_snippet": "    def ExecManifestToRc(self, arch, *args):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\compile_commands_json.py",
      "line_number": 40,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'CalculateVariables' may be missing return statement",
      "code_snippet": "def CalculateVariables(default_variables, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\compile_commands_json.py",
      "line_number": 99,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'GenerateOutput' may be missing return statement",
      "code_snippet": "def GenerateOutput(target_list, target_dicts, data, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\compile_commands_json.py",
      "line_number": 119,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'PerformBuild' may be missing return statement",
      "code_snippet": "def PerformBuild(data, configurations, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\dump_dependency_json.py",
      "line_number": 45,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'CalculateVariables' may be missing return statement",
      "code_snippet": "def CalculateVariables(default_variables, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\dump_dependency_json.py",
      "line_number": 56,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'CalculateGeneratorInputInfo' may be missing return statement",
      "code_snippet": "def CalculateGeneratorInputInfo(params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\dump_dependency_json.py",
      "line_number": 78,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'GenerateOutput' may be missing return statement",
      "code_snippet": "def GenerateOutput(target_list, target_dicts, data, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\eclipse.py",
      "line_number": 59,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'CalculateVariables' may be missing return statement",
      "code_snippet": "def CalculateVariables(default_variables, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\eclipse.py",
      "line_number": 69,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'CalculateGeneratorInputInfo' may be missing return statement",
      "code_snippet": "def CalculateGeneratorInputInfo(params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\eclipse.py",
      "line_number": 260,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteIncludePaths' may be missing return statement",
      "code_snippet": "def WriteIncludePaths(out, eclipse_langs, include_dirs):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\eclipse.py",
      "line_number": 279,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteMacros' may be missing return statement",
      "code_snippet": "def WriteMacros(out, eclipse_langs, defines):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\eclipse.py",
      "line_number": 298,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'GenerateOutputForConfig' may be missing return statement",
      "code_snippet": "def GenerateOutputForConfig(target_list, target_dicts, data, params, config_name):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\eclipse.py",
      "line_number": 333,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'GenerateCdtSettingsFile' may be missing return statement",
      "code_snippet": "def GenerateCdtSettingsFile(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\eclipse.py",
      "line_number": 374,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'GenerateClasspathFile' may be missing return statement",
      "code_snippet": "def GenerateClasspathFile(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\eclipse.py",
      "line_number": 383,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AddElements' may be missing return statement",
      "code_snippet": "    def AddElements(kind, paths):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\eclipse.py",
      "line_number": 409,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'GetJavaJars' may be missing return statement",
      "code_snippet": "def GetJavaJars(target_list, target_dicts, toplevel_dir):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\eclipse.py",
      "line_number": 422,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'GetJavaSourceDirs' may be missing return statement",
      "code_snippet": "def GetJavaSourceDirs(target_list, target_dicts, toplevel_dir):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\eclipse.py",
      "line_number": 450,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'GenerateOutput' may be missing return statement",
      "code_snippet": "def GenerateOutput(target_list, target_dicts, data, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\gypd.py",
      "line_number": 74,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'GenerateOutput' may be missing return statement",
      "code_snippet": "def GenerateOutput(target_list, target_dicts, data, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\gypsh.py",
      "line_number": 42,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'GenerateOutput' may be missing return statement",
      "code_snippet": "def GenerateOutput(target_list, target_dicts, data, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 65,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'CalculateVariables' may be missing return statement",
      "code_snippet": "def CalculateVariables(default_variables, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 111,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'CalculateGeneratorInputInfo' may be missing return statement",
      "code_snippet": "def CalculateGeneratorInputInfo(params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 613,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteRootHeaderSuffixRules' may be missing return statement",
      "code_snippet": "def WriteRootHeaderSuffixRules(writer):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 772,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, generator_flags, flavor):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 819,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'Write' may be missing return statement",
      "code_snippet": "    def Write(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 972,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteSubMake' may be missing return statement",
      "code_snippet": "    def WriteSubMake(self, output_filename, makefile_path, targets, build_dir):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1000,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteActions' may be missing return statement",
      "code_snippet": "    def WriteActions(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1125,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteRules' may be missing return statement",
      "code_snippet": "    def WriteRules(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1269,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteCopies' may be missing return statement",
      "code_snippet": "    def WriteCopies(self, copies, extra_outputs, part_of_all):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1309,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteMacBundleResources' may be missing return statement",
      "code_snippet": "    def WriteMacBundleResources(self, resources, bundle_deps):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1366,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteSources' may be missing return statement",
      "code_snippet": "    def WriteSources(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1666,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteDependencyOnExtraOutputs' may be missing return statement",
      "code_snippet": "    def WriteDependencyOnExtraOutputs(self, target, extra_outputs):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1674,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteTarget' may be missing return statement",
      "code_snippet": "    def WriteTarget(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 2060,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteList' may be missing return statement",
      "code_snippet": "    def WriteList(self, value_list, variable=None, prefix=\"\", quoter=QuoteIfNecessary):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 2073,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteDoCmd' may be missing return statement",
      "code_snippet": "    def WriteDoCmd(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 2100,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteMakeRule' may be missing return statement",
      "code_snippet": "    def WriteMakeRule(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 2265,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteLn' may be missing return statement",
      "code_snippet": "    def WriteLn(self, text=\"\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 2289,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteSortedXcodeEnv' may be missing return statement",
      "code_snippet": "    def WriteSortedXcodeEnv(self, target, env):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 2354,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteAutoRegenerationRule' may be missing return statement",
      "code_snippet": "def WriteAutoRegenerationRule(params, root_makefile, makefile_name, build_files):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 2383,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'PerformBuild' may be missing return statement",
      "code_snippet": "def PerformBuild(data, configurations, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\pretty_vcproj.py",
      "line_number": 132,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AbsoluteNode' may be missing return statement",
      "code_snippet": "def AbsoluteNode(node):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\pretty_vcproj.py",
      "line_number": 152,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'CleanupVcproj' may be missing return statement",
      "code_snippet": "def CleanupVcproj(node):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\pretty_vcproj.py",
      "line_number": 277,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'MergeProperties' may be missing return statement",
      "code_snippet": "def MergeProperties(node1, node2):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs_test.py",
      "line_number": 15,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'setUp' may be missing return statement",
      "code_snippet": "    def setUp(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs_test.py",
      "line_number": 18,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_GetLibraries' may be missing return statement",
      "code_snippet": "    def test_GetLibraries(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 462,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddActionStep' may be missing return statement",
      "code_snippet": "def _AddActionStep(actions_dict, inputs, outputs, description, command):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 497,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddCustomBuildToolForMSVS' may be missing return statement",
      "code_snippet": "def _AddCustomBuildToolForMSVS(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 529,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddAccumulatedActionsToMSVS' may be missing return statement",
      "code_snippet": "def _AddAccumulatedActionsToMSVS(p, spec, actions_dict):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 616,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_GenerateNativeRulesForMSVS' may be missing return statement",
      "code_snippet": "def _GenerateNativeRulesForMSVS(p, rules, output_dir, spec, options):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 661,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_GenerateExternalRules' may be missing return statement",
      "code_snippet": "def _GenerateExternalRules(rules, output_dir, spec, sources, options, actions_to_add):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 897,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_GenerateRulesForMSVS' may be missing return statement",
      "code_snippet": "def _GenerateRulesForMSVS(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 927,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AdjustSourcesForRules' may be missing return statement",
      "code_snippet": "def _AdjustSourcesForRules(rules, sources, excluded_sources, is_msbuild):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1164,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddConfigurationToMSVSProject' may be missing return statement",
      "code_snippet": "def _AddConfigurationToMSVSProject(p, spec, config_type, config_name, config):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1445,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddConfigurationToMSVS' may be missing return statement",
      "code_snippet": "def _AddConfigurationToMSVS(p, spec, tools, config, config_type, config_name):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1490,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddNormalizedSources' may be missing return statement",
      "code_snippet": "def _AddNormalizedSources(sources_set, sources_array):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1619,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_ExcludeFilesFromBeingBuilt' may be missing return statement",
      "code_snippet": "def _ExcludeFilesFromBeingBuilt(p, spec, excluded_sources, excluded_idl, list_excluded):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1656,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddToolFilesToMSVS' may be missing return statement",
      "code_snippet": "def _AddToolFilesToMSVS(p, spec):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1666,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_HandlePreCompiledHeaders' may be missing return statement",
      "code_snippet": "def _HandlePreCompiledHeaders(p, sources, spec):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1687,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'DisableForSourceTree' may be missing return statement",
      "code_snippet": "    def DisableForSourceTree(source_tree):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1714,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddActions' may be missing return statement",
      "code_snippet": "def _AddActions(actions_to_add, spec, relative_path_of_gyp_file):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1763,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddCopies' may be missing return statement",
      "code_snippet": "def _AddCopies(actions_to_add, spec):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1971,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_InitNinjaFlavor' may be missing return statement",
      "code_snippet": "def _InitNinjaFlavor(params, target_list, target_dicts):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2022,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'CalculateVariables' may be missing return statement",
      "code_snippet": "def CalculateVariables(default_variables, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2053,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'PerformBuild' may be missing return statement",
      "code_snippet": "def PerformBuild(data, configurations, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2072,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'CalculateGeneratorInputInfo' may be missing return statement",
      "code_snippet": "def CalculateGeneratorInputInfo(params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2090,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'GenerateOutput' may be missing return statement",
      "code_snippet": "def GenerateOutput(target_list, target_dicts, data, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2182,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_GenerateMSBuildFiltersFile' may be missing return statement",
      "code_snippet": "def _GenerateMSBuildFiltersFile(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2228,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AppendFiltersForMSBuild' may be missing return statement",
      "code_snippet": "def _AppendFiltersForMSBuild(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2329,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_GenerateRulesForMSBuild' may be missing return statement",
      "code_snippet": "def _GenerateRulesForMSBuild(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2402,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, rule, spec):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2441,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_GenerateMSBuildRulePropsFile' may be missing return statement",
      "code_snippet": "def _GenerateMSBuildRulePropsFile(props_path, msbuild_rules):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2483,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_GenerateMSBuildRuleTargetsFile' may be missing return statement",
      "code_snippet": "def _GenerateMSBuildRuleTargetsFile(targets_path, msbuild_rules):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2685,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_GenerateMSBuildRuleXmlFile' may be missing return statement",
      "code_snippet": "def _GenerateMSBuildRuleXmlFile(xml_path, msbuild_rules):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3238,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddConditionalProperty' may be missing return statement",
      "code_snippet": "def _AddConditionalProperty(properties, condition, name, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3342,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_FinalizeMSBuildSettings' may be missing return statement",
      "code_snippet": "def _FinalizeMSBuildSettings(spec, configuration):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3545,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddSources2' may be missing return statement",
      "code_snippet": "def _AddSources2(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3952,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_AddMSBuildAction' may be missing return statement",
      "code_snippet": "def _AddMSBuildAction(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja_test.py",
      "line_number": 16,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_BinaryNamesWindows' may be missing return statement",
      "code_snippet": "    def test_BinaryNamesWindows(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja_test.py",
      "line_number": 34,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_BinaryNamesLinux' may be missing return statement",
      "code_snippet": "    def test_BinaryNamesLinux(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 81,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'CalculateVariables' may be missing return statement",
      "code_snippet": "def CalculateVariables(default_variables, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 144,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'SetFileProperty' may be missing return statement",
      "code_snippet": "def SetFileProperty(output, source_name, property_name, values, sep):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 157,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'SetFilesProperty' may be missing return statement",
      "code_snippet": "def SetFilesProperty(output, variable, property_name, values, sep):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 170,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'SetTargetProperty' may be missing return statement",
      "code_snippet": "def SetTargetProperty(output, target_name, property_name, values, sep=\"\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 183,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'SetVariable' may be missing return statement",
      "code_snippet": "def SetVariable(output, variable_name, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 205,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'UnsetVariable' may be missing return statement",
      "code_snippet": "def UnsetVariable(output, variable_name):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 212,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteVariable' may be missing return statement",
      "code_snippet": "def WriteVariable(output, variable_name, prepend=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 221,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, command, modifier, property_modifier):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 247,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteActions' may be missing return statement",
      "code_snippet": "def WriteActions(target_name, actions, extra_sources, extra_deps, path_to_gyp, output):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 336,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteRules' may be missing return statement",
      "code_snippet": "def WriteRules(target_name, rules, extra_sources, extra_deps, path_to_gyp, output):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 476,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "        def __init__(self, ext, command):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 605,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, target_list):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 1143,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'GenerateOutputForConfig' may be missing return statement",
      "code_snippet": "def GenerateOutputForConfig(target_list, target_dicts, data, params, config_to_use):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 1264,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'PerformBuild' may be missing return statement",
      "code_snippet": "def PerformBuild(data, configurations, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 1290,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'CallGenerateOutputForConfig' may be missing return statement",
      "code_snippet": "def CallGenerateOutputForConfig(arglist):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 1299,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'GenerateOutput' may be missing return statement",
      "code_snippet": "def GenerateOutput(target_list, target_dicts, data, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode_test.py",
      "line_number": 17,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_InheritedRemainsUnescaped' may be missing return statement",
      "code_snippet": "        def test_InheritedRemainsUnescaped(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode_test.py",
      "line_number": 20,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'test_Escaping' may be missing return statement",
      "code_snippet": "        def test_Escaping(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 20,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 25,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 67,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_ref' may be missing return statement",
      "code_snippet": "def _ref(key, value, input, known, output):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 125,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, type):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 214,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 863,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteiOSFrameworkHeaders' may be missing return statement",
      "code_snippet": "    def WriteiOSFrameworkHeaders(self, spec, outputs, prebuild):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1716,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AppendPostbuildVariable' may be missing return statement",
      "code_snippet": "    def AppendPostbuildVariable(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1895,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteVariableList' may be missing return statement",
      "code_snippet": "    def WriteVariableList(self, ninja_file, var, values):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1985,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'CalculateVariables' may be missing return statement",
      "code_snippet": "def CalculateVariables(default_variables, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 2060,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'CalculateGeneratorInputInfo' may be missing return statement",
      "code_snippet": "def CalculateGeneratorInputInfo(params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 2212,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'GenerateOutputForConfig' may be missing return statement",
      "code_snippet": "def GenerateOutputForConfig(target_list, target_dicts, data, params, config_name):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 2885,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'PerformBuild' may be missing return statement",
      "code_snippet": "def PerformBuild(data, configurations, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 2894,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'CallGenerateOutputForConfig' may be missing return statement",
      "code_snippet": "def CallGenerateOutputForConfig(arglist):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 2903,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'GenerateOutput' may be missing return statement",
      "code_snippet": "def GenerateOutput(target_list, target_dicts, data, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\agents\\debug_logger_agent.py",
      "line_number": 5,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id=\"debug_logger_agent\", core_config=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\agents\\echo_agent.py",
      "line_number": 4,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id=\"echo_001\", core_config=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\agents\\test_processing_agent.py",
      "line_number": 4,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id=\"test_processing_agent\", core_config=None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\core\\agent_base.py",
      "line_number": 14,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id: str, core_config: Dict[str, Any], plugin_manager: Optional[Any] = None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\core\\cascade_executor.py",
      "line_number": 14,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, vmc: Any):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\core\\keb_client.py",
      "line_number": 17,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, redis_host: str = 'localhost', redis_port: int = 6379, redis_db: int = 0):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\core\\keb_client.py",
      "line_number": 178,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'disconnect' may be missing return statement",
      "code_snippet": "    def disconnect(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\core\\keb_client.py",
      "line_number": 201,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'handle_test_message' may be missing return statement",
      "code_snippet": "        def handle_test_message(event_id_from_stream: str, message_payload: Dict[str, Any]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\core\\vanta_master_core.py",
      "line_number": 24,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, config: Optional[Dict[str, Any]] = None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\core\\vanta_master_core.py",
      "line_number": 155,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'register_agent' may be missing return statement",
      "code_snippet": "    def register_agent(self, agent_id: str, agent_instance: Any):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\core\\vanta_master_core.py",
      "line_number": 276,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'handle_control_event' may be missing return statement",
      "code_snippet": "    def handle_control_event(self, stream_message_id: str, event_payload: Dict[str, Any]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\core\\vanta_master_core_enhanced.py",
      "line_number": 54,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, config: Optional[Dict[str, Any]] = None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\core\\vanta_master_core_enhanced.py",
      "line_number": 192,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'register_agent' may be missing return statement",
      "code_snippet": "    def register_agent(self, agent_id: str, agent_instance: Any):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\core\\vanta_master_core_enhanced.py",
      "line_number": 747,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'handle_control_event' may be missing return statement",
      "code_snippet": "    def handle_control_event(self, stream_message_id: str, event_payload: Dict[str, Any]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\agents\\cursor_rules_sync_agent.py",
      "line_number": 123,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, *args, **kwargs):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\agents\\cursor_rules_sync_agent.py",
      "line_number": 203,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'setup' may be missing return statement",
      "code_snippet": "    def setup(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\agents\\cursor_rules_sync_agent.py",
      "line_number": 534,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_build_inheritance_graph' may be missing return statement",
      "code_snippet": "    def _build_inheritance_graph(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\agents\\cursor_rules_sync_agent.py",
      "line_number": 554,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_identify_symlink_candidates' may be missing return statement",
      "code_snippet": "    def _identify_symlink_candidates(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\enhanced_stakeholder_communication.py",
      "line_number": 60,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\enhanced_stakeholder_communication.py",
      "line_number": 238,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\enhanced_stakeholder_communication.py",
      "line_number": 368,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\enhanced_stakeholder_communication.py",
      "line_number": 374,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'register_stakeholder' may be missing return statement",
      "code_snippet": "    def register_stakeholder(self, stakeholder: StakeholderProfile):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\rollback_recovery_manager.py",
      "line_number": 88,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, db_config: Dict[str, Any]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\rollback_recovery_manager.py",
      "line_number": 185,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, backup_config: Dict[str, Any]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\rollback_recovery_manager.py",
      "line_number": 252,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, health_config: Dict[str, Any]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\rollback_recovery_manager.py",
      "line_number": 387,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, config: Dict[str, Any]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\rollback_recovery_manager.py",
      "line_number": 404,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_init_storage' may be missing return statement",
      "code_snippet": "    def _init_storage(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\rollback_recovery_manager.py",
      "line_number": 727,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_store_snapshot' may be missing return statement",
      "code_snippet": "    def _store_snapshot(self, snapshot: SystemSnapshot):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\rollback_recovery_manager.py",
      "line_number": 780,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_store_rollback_event' may be missing return statement",
      "code_snippet": "    def _store_rollback_event(self, event: RollbackEvent):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 113,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, gyp_path, path, build_file_dict):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 138,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'Finalize1' may be missing return statement",
      "code_snippet": "    def Finalize1(self, xcode_targets, serialize_all_tests):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 388,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'Finalize2' may be missing return statement",
      "code_snippet": "    def Finalize2(self, xcode_targets, xcode_target_to_target_dict):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 456,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'Write' may be missing return statement",
      "code_snippet": "    def Write(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 522,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AddSourceToTarget' may be missing return statement",
      "code_snippet": "def AddSourceToTarget(source, type, pbxp, xct):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 548,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AddResourceToTarget' may be missing return statement",
      "code_snippet": "def AddResourceToTarget(resource, pbxp, xct):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 554,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'AddHeaderToTarget' may be missing return statement",
      "code_snippet": "def AddHeaderToTarget(header, pbxp, xct, is_public):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 601,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'PerformBuild' may be missing return statement",
      "code_snippet": "def PerformBuild(data, configurations, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 619,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'CalculateGeneratorInputInfo' may be missing return statement",
      "code_snippet": "def CalculateGeneratorInputInfo(params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 641,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'GenerateOutput' may be missing return statement",
      "code_snippet": "def GenerateOutput(target_list, target_dicts, data, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\agents\\AgentBase.py",
      "line_number": 31,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id: str, core_config: Dict[str, Any], plugin_manager: Any = None, **kwargs):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\agents\\AgentBase.py",
      "line_number": 112,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'load_config' may be missing return statement",
      "code_snippet": "    def load_config(self, config_data: Dict[str, Any]) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\agents\\OperatorOmegaAgent.py",
      "line_number": 51,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, ",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\agents\\OperatorOmegaAgent.py",
      "line_number": 101,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_create_uap_config' may be missing return statement",
      "code_snippet": "    def _create_uap_config(self, config_path: str) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\services\\AgentDiscoveryService.py",
      "line_number": 56,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, ",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 108,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, android_top_dir):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 253,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteActions' may be missing return statement",
      "code_snippet": "    def WriteActions(self, actions, extra_sources, extra_outputs):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 459,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteCopies' may be missing return statement",
      "code_snippet": "    def WriteCopies(self, copies, extra_outputs):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 501,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteSourceFlags' may be missing return statement",
      "code_snippet": "    def WriteSourceFlags(self, spec, configs):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 554,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteSources' may be missing return statement",
      "code_snippet": "    def WriteSources(self, spec, configs, extra_sources):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 845,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteTargetFlags' may be missing return statement",
      "code_snippet": "    def WriteTargetFlags(self, spec, configs, link_deps):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 888,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteTarget' may be missing return statement",
      "code_snippet": "    def WriteTarget(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 967,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteList' may be missing return statement",
      "code_snippet": "    def WriteList(",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 989,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'WriteLn' may be missing return statement",
      "code_snippet": "    def WriteLn(self, text=\"\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 1021,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'PerformBuild' may be missing return statement",
      "code_snippet": "def PerformBuild(data, configurations, params):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "reference software code\\awesome-mcp-servers\\supertoolkit-mcp\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 20,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "reference software code\\awesome-mcp-servers\\supertoolkit-mcp\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 25,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "reference software code\\awesome-mcp-servers\\supertoolkit-mcp\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 67,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_ref' may be missing return statement",
      "code_snippet": "def _ref(key, value, input, known, output):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 73,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 206,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 210,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'add_historical_decision' may be missing return statement",
      "code_snippet": "    def add_historical_decision(self, decision: HistoricalDecision):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 255,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_update_accuracy_metrics' may be missing return statement",
      "code_snippet": "    def _update_accuracy_metrics(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 264,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 448,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'update_decision_outcome' may be missing return statement",
      "code_snippet": "    def update_decision_outcome(self, ",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 466,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_load_historical_data' may be missing return statement",
      "code_snippet": "    def _load_historical_data(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 471,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_save_historical_data' may be missing return statement",
      "code_snippet": "    def _save_historical_data(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 482,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, scorer: DecisionConfidenceScorer):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "node_modules\\flatted\\python\\flatted.py",
      "line_number": 20,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "node_modules\\flatted\\python\\flatted.py",
      "line_number": 25,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, value):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "node_modules\\flatted\\python\\flatted.py",
      "line_number": 67,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_ref' may be missing return statement",
      "code_snippet": "def _ref(key, value, input, known, output):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "governance\\integration\\omega_executor.py",
      "line_number": 39,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, project_root: str = None, governance_config: Dict[str, Any] = None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "governance\\integration\\omega_executor.py",
      "line_number": 378,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_apply_modifications' may be missing return statement",
      "code_snippet": "    def _apply_modifications(self, plan: Dict[str, Any], modifications: List[Dict[str, Any]]) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "governance\\integration\\omega_executor.py",
      "line_number": 388,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_add_security_check' may be missing return statement",
      "code_snippet": "    def _add_security_check(self, plan: Dict[str, Any], modification: Dict[str, Any]) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "governance\\integration\\omega_executor.py",
      "line_number": 394,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_enforce_coordination_modification' may be missing return statement",
      "code_snippet": "    def _enforce_coordination_modification(self, plan: Dict[str, Any], modification: Dict[str, Any]) -> None:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "governance\\integration\\omega_executor.py",
      "line_number": 430,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, rules_data: Dict[str, Any]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\agent_base.py",
      "line_number": 14,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, title: str, edits: List[Any] = None, details: Any = None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\agent_base.py",
      "line_number": 25,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'on_file_change' may be missing return statement",
      "code_snippet": "    def on_file_change(self, context: TriggerContext) -> List[Suggestion]:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\agent_base.py",
      "line_number": 28,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'on_user_query' may be missing return statement",
      "code_snippet": "    def on_user_query(self, context: TriggerContext) -> List[Suggestion]:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\agent_base.py",
      "line_number": 31,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'on_message' may be missing return statement",
      "code_snippet": "    def on_message(self, context: TriggerContext) -> List[Suggestion]:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\agent_base.py",
      "line_number": 34,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'on_api_request' may be missing return statement",
      "code_snippet": "    def on_api_request(self, context: TriggerContext) -> List[Suggestion]:",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\collapse_monitor_agent.py",
      "line_number": 29,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, redis_host: str = \"localhost\", redis_port: int = 6379, redis_db: int = 0):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\data_unifier_agent.py",
      "line_number": 29,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, redis_host: str = \"localhost\", redis_port: int = 6379, redis_db: int = 0):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\references\\framework_rules.py",
      "line_number": 15,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, rule_index_path=\"FrAMEWORK RULES/rule-index.yaml\"):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\scheduler\\run_mdc_maintenance.py",
      "line_number": 43,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'main' may be missing return statement",
      "code_snippet": "def main():",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\utils\\logger.py",
      "line_number": 65,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, module: str, config: Optional[LoggerConfig] = None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\utils\\logger.py",
      "line_number": 74,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_setup_python_logger' may be missing return statement",
      "code_snippet": "    def _setup_python_logger(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\utils\\logger.py",
      "line_number": 99,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'debug' may be missing return statement",
      "code_snippet": "    def debug(self, message: str, data: Optional[Dict[str, Any]] = None, context: Optional[Dict[str, Any]] = None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\utils\\logger.py",
      "line_number": 103,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'info' may be missing return statement",
      "code_snippet": "    def info(self, message: str, data: Optional[Dict[str, Any]] = None, context: Optional[Dict[str, Any]] = None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\utils\\logger.py",
      "line_number": 107,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'warn' may be missing return statement",
      "code_snippet": "    def warn(self, message: str, data: Optional[Dict[str, Any]] = None, context: Optional[Dict[str, Any]] = None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\utils\\logger.py",
      "line_number": 111,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'error' may be missing return statement",
      "code_snippet": "    def error(self, message: str, data: Optional[Dict[str, Any]] = None, context: Optional[Dict[str, Any]] = None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\utils\\logger.py",
      "line_number": 115,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'audit' may be missing return statement",
      "code_snippet": "    def audit(self, action: str, details: Dict[str, Any]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\utils\\logger.py",
      "line_number": 146,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'security' may be missing return statement",
      "code_snippet": "    def security(self, event: str, details: Dict[str, Any]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\utils\\logger.py",
      "line_number": 159,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'performance' may be missing return statement",
      "code_snippet": "    def performance(self, operation: str, duration: float, details: Optional[Dict[str, Any]] = None):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\utils\\logger.py",
      "line_number": 300,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_output' may be missing return statement",
      "code_snippet": "    def _output(self, entry: LogEntry):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\utils\\logger.py",
      "line_number": 336,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_output_to_console' may be missing return statement",
      "code_snippet": "    def _output_to_console(self, formatted: str, level: LogLevel):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\utils\\logger.py",
      "line_number": 347,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_output_to_file' may be missing return statement",
      "code_snippet": "    def _output_to_file(self, formatted: str):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\utils\\logger.py",
      "line_number": 400,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, label: str, logger: Logger):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\ritual_upkeep_agent.py",
      "line_number": 13,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "        def __init__(self, agent_id: str, core_config: Dict[str, Any], plugin_manager: Any = None, **kwargs):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\ritual_upkeep_agent.py",
      "line_number": 33,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'load_config' may be missing return statement",
      "code_snippet": "        def load_config(self, config_data: Dict[str, Any]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\ritual_upkeep_agent.py",
      "line_number": 44,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, agent_id: str, core_config: Dict[str, Any], plugin_manager: Any = None, **kwargs):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\ritual_upkeep_agent.py",
      "line_number": 267,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '_log_maintenance_findings' may be missing return statement",
      "code_snippet": "    def _log_maintenance_findings(self, findings: List[Dict[str, Any]]):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "UAP\\runners\\UAPAgentBase.py",
      "line_number": 7,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function '__init__' may be missing return statement",
      "code_snippet": "    def __init__(self, yaml_path):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "UAP\\runners\\UAPAgentBase.py",
      "line_number": 14,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'plan' may be missing return statement",
      "code_snippet": "    def plan(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "UAP\\runners\\UAPAgentBase.py",
      "line_number": 17,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'execute' may be missing return statement",
      "code_snippet": "    def execute(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "UAP\\runners\\UAPAgentBase.py",
      "line_number": 20,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'collapse' may be missing return statement",
      "code_snippet": "    def collapse(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "UAP\\runners\\UAPAgentBase.py",
      "line_number": 23,
      "bug_type": "missing_return",
      "severity": "medium",
      "description": "Function 'run' may be missing return statement",
      "code_snippet": "    def run(self):",
      "suggested_fix": "Add explicit return statement or ensure all code paths return a value",
      "expert_agent": "logic_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 481,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "os.system() can be vulnerable to injection",
      "code_snippet": "result = os.system(injected_command)",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 434,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of eval() can lead to code injection",
      "code_snippet": "(r'eval\\s*\\(', \"code_injection\", \"Use of eval() can lead to code injection\"),",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 435,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of exec() can lead to code injection",
      "code_snippet": "(r'exec\\s*\\(', \"code_injection\", \"Use of exec() can lead to code injection\"),",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 436,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "shell=True in subprocess calls can be dangerous",
      "code_snippet": "(r'shell=True', \"command_injection\", \"shell=True in subprocess calls can be dangerous\"),",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 439,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "os.system() can be vulnerable to injection",
      "code_snippet": "(r'os\\.system\\s*\\(', \"command_injection\", \"os.system() can be vulnerable to injection\"),",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 642,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of eval() can lead to code injection",
      "code_snippet": "\"code_injection\": \"Use ast.literal_eval() for safe evaluation or validate input thoroughly\",",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 643,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "shell=True in subprocess calls can be dangerous",
      "code_snippet": "\"command_injection\": \"Use parameterized commands and avoid shell=True\",",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 663,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "shell=True in subprocess calls can be dangerous",
      "code_snippet": "\"security\": [\"eval\", \"exec\", \"shell=True\"],",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_phase_4_2_business_enhancement.py",
      "line_number": 372,
      "bug_type": "hardcoded_api_key",
      "severity": "high",
      "description": "Hardcoded API key detected",
      "code_snippet": "API_KEY = \"sk_live_51HyUaSDdx4o9KqYQ8ZX1HyUaSDdx4o9KqYQ8ZX\"",
      "suggested_fix": "Use environment variables or secure key management",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_phase_4_2_business_enhancement.py",
      "line_number": 378,
      "bug_type": "hardcoded_api_key",
      "severity": "high",
      "description": "Hardcoded API key detected",
      "code_snippet": "SENDGRID_API_KEY = \"SG.demo_sendgrid_api_key_for_email_service\"",
      "suggested_fix": "Use environment variables or secure key management",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_enhanced_security_hardening.py",
      "line_number": 279,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of eval() can lead to code injection",
      "code_snippet": "threat_payload[\"eval\"] = \"eval(malicious_code)\"",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "production_deploy.py",
      "line_number": 18,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "shell=True in subprocess calls can be dangerous",
      "code_snippet": "result = subprocess.run(cmd, shell=True, check=check)",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "test_runner.py",
      "line_number": 14,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "shell=True in subprocess calls can be dangerous",
      "code_snippet": "result = subprocess.run(command, shell=True, capture_output=True, text=True)",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 522,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of exec() can lead to code injection",
      "code_snippet": "if dialog.exec():",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 558,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of exec() can lead to code injection",
      "code_snippet": "if dialog.exec():",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 614,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of exec() can lead to code injection",
      "code_snippet": "if dialog.exec():",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 675,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of exec() can lead to code injection",
      "code_snippet": "sys.exit(app.exec())",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_launcher.py",
      "line_number": 8,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "shell=True in subprocess calls can be dangerous",
      "code_snippet": "process = Popen(cmd, stdout=PIPE, stderr=PIPE, shell=True, text=True)",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agents\\VaultAccessAgent.py",
      "line_number": 126,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of exec() can lead to code injection",
      "code_snippet": "process = await asyncio.create_subprocess_exec(",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 459,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of eval() can lead to code injection",
      "code_snippet": "if any(pattern in value.lower() for pattern in ['<script>', 'javascript:', 'eval(', 'exec(']):",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 459,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of exec() can lead to code injection",
      "code_snippet": "if any(pattern in value.lower() for pattern in ['<script>', 'javascript:', 'eval(', 'exec(']):",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\runtime_governance_engine.py",
      "line_number": 545,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of eval() can lead to code injection",
      "code_snippet": "return eval(condition, {\"__builtins__\": {}}, eval_context)",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_agent_memory_system.py",
      "line_number": 103,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of eval() can lead to code injection",
      "code_snippet": "async def test_memory_storage_and_retrieval(self, memory_system):",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 37,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of exec() can lead to code injection",
      "code_snippet": "def exec(self):",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 1206,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "shell=True in subprocess calls can be dangerous",
      "code_snippet": "args, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 1230,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "shell=True in subprocess calls can be dangerous",
      "code_snippet": "popen = subprocess.Popen(args, shell=True, stdout=subprocess.PIPE)",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\win_tool.py",
      "line_number": 128,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "shell=True in subprocess calls can be dangerous",
      "code_snippet": "# \"On Unix with shell=True [...] if args is a sequence, the first item",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\win_tool.py",
      "line_number": 254,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "shell=True in subprocess calls can be dangerous",
      "code_snippet": "args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\win_tool.py",
      "line_number": 298,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "shell=True in subprocess calls can be dangerous",
      "code_snippet": "args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\win_tool.py",
      "line_number": 317,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "shell=True in subprocess calls can be dangerous",
      "code_snippet": "args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\win_tool.py",
      "line_number": 335,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "shell=True in subprocess calls can be dangerous",
      "code_snippet": "args, shell=True, env=env, stdout=subprocess.PIPE, stderr=subprocess.STDOUT",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\win_tool.py",
      "line_number": 358,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "shell=True in subprocess calls can be dangerous",
      "code_snippet": "return subprocess.call(args, shell=True, env=env, cwd=dir)",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\win_tool.py",
      "line_number": 370,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "shell=True in subprocess calls can be dangerous",
      "code_snippet": "return subprocess.call(cmd, shell=True, cwd=BASE_DIR)",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 172,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of eval() can lead to code injection",
      "code_snippet": "def CheckedEval(file_contents):",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 176,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of eval() can lead to code injection",
      "code_snippet": "Note that this is slower than eval() is.",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 235,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of eval() can lead to code injection",
      "code_snippet": "build_file_data = CheckedEval(build_file_contents)",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 237,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of eval() can lead to code injection",
      "code_snippet": "build_file_data = eval(build_file_contents, {\"__builtins__\": {}}, None)",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 904,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of eval() can lead to code injection",
      "code_snippet": "contents = eval(contents)",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1187,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of eval() can lead to code injection",
      "code_snippet": "if eval(ast_code, env, variables):",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\gypd.py",
      "line_number": 26,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of eval() can lead to code injection",
      "code_snippet": "run \"pprint.pprint(eval(open('source.gyp').read()))\", which will still strip",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\agents\\cursor_rules_sync_agent.py",
      "line_number": 590,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "shell=True in subprocess calls can be dangerous",
      "code_snippet": "subprocess.run(['mklink', '/J', str(target), str(source)], shell=True, check=True)",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\rollback_recovery_manager.py",
      "line_number": 109,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of exec() can lead to code injection",
      "code_snippet": "result = await asyncio.create_subprocess_exec(",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\rollback_recovery_manager.py",
      "line_number": 161,
      "bug_type": "code_injection",
      "severity": "high",
      "description": "Use of exec() can lead to code injection",
      "code_snippet": "result = await asyncio.create_subprocess_exec(",
      "suggested_fix": "Use ast.literal_eval() for safe evaluation or validate input thoroughly",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\rule_checker_agent.py",
      "line_number": 22,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "shell=True in subprocess calls can be dangerous",
      "code_snippet": "if 'shell=True' in content:",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\rule_checker_agent.py",
      "line_number": 26,
      "bug_type": "command_injection",
      "severity": "high",
      "description": "shell=True in subprocess calls can be dangerous",
      "code_snippet": "details=\"Avoid shell=True to prevent injection; pass args list.\",",
      "suggested_fix": "Use parameterized commands and avoid shell=True",
      "expert_agent": "security_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 84,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.analysis_proposals.append(proposal)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 298,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "python_files.append(path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 585,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "imports.append((line_num, line.strip()))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "codebase_bug_buster_coe.py",
      "line_number": 653,
      "bug_type": "inefficient_iteration",
      "severity": "low",
      "description": "Use direct iteration over container instead of range(len())",
      "code_snippet": "\"inefficient_iteration\": \"Use: for item in container instead of for i in range(len(container))\",",
      "suggested_fix": "Use: for item in container instead of for i in range(len(container))",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 237,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "choices.append(f\"{key}: {description} ({confidence}% confidence)\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 431,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "keys_to_fetch.append(\"OPENAI_API_KEY\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 435,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "keys_to_fetch.append(key_pattern)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 438,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "keys_to_fetch.append(key_pattern)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "a2a_messaging_system.py",
      "line_number": 121,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.capability_registry[capability.agent_id].append(capability)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "a2a_messaging_system.py",
      "line_number": 165,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "candidates.append((agent_id, capability.performance_score))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "a2a_messaging_system.py",
      "line_number": 178,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "trinity_leaders.append(agent_id)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "a2a_messaging_system.py",
      "line_number": 189,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "symbolic_agents.append(agent_id)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "a2a_messaging_system.py",
      "line_number": 253,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "messages.append(message)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 167,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "params.append(param_match.group(1))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 366,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "by_category[category]['functions'].append(asdict(cli_func))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 401,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "missing_by_category[category].append(cli_func.name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 405,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(f\"Add {category} interface components for: {', '.join(missing)}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 409,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"Create MCP tools management interface with server status and tool execution\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 412,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"Implement governance dashboard with audit trail and approval workflows\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit.py",
      "line_number": 415,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"Add setup wizard and configuration management interface\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli.py",
      "line_number": 49,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "tool_paths.append(tool)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli.py",
      "line_number": 122,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sync_info['synced_items'].append({\"source\": str(item_source_rel), \"target\": str(item_target_rel), \"status\": \"symlinked_file\"})",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli.py",
      "line_number": 136,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sync_info['synced_items'].append({\"source\": str(item_source_rel), \"target\": str(item_target_rel), \"status\": \"symlinked_dir\"})",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli.py",
      "line_number": 147,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sync_info['synced_items'].append({\"source\": str(item_source_rel), \"target\": str(item_target_rel), \"status\": \"copied_file\"})",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli.py",
      "line_number": 155,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sync_info['synced_items'].append({\"source\": str(item_source_rel), \"target\": str(item_target_rel), \"status\": \"copied_dir\"})",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agentic_bootstrap_engine.py",
      "line_number": 197,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "architecture_indicators.append(\"agent_directory_structure\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agentic_bootstrap_engine.py",
      "line_number": 202,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "architecture_indicators.append(\"mcp_integration\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agentic_bootstrap_engine.py",
      "line_number": 207,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "architecture_indicators.append(\"vanta_architecture\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agentic_bootstrap_engine.py",
      "line_number": 213,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "architecture_indicators.append(f\"trinity_{pattern}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agentic_bootstrap_engine.py",
      "line_number": 238,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "trinity_indicators.append(role)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agentic_bootstrap_engine.py",
      "line_number": 655,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "spawned_agents.append(agent_genesis)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit_optimized.py",
      "line_number": 196,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "params.append(match.group(1))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit_optimized.py",
      "line_number": 254,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "web_files.append(file_path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit_optimized.py",
      "line_number": 348,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cli_by_category[func.category].append(func)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_to_web_interface_audit_optimized.py",
      "line_number": 352,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "web_by_type[comp.type].append(comp)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 105,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "metrics.append(arch_metric)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 109,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "metrics.append(symbolic_metric)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 113,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "metrics.append(perf_metric)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 117,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "metrics.append(trinity_metric)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 121,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "metrics.append(narrative_metric)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 137,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "contributing_factors.append(f\"capability_match: {capability_match:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 142,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "contributing_factors.append(f\"integration_score: {integration_score:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 147,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "contributing_factors.append(f\"pattern_adherence: {pattern_adherence:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 171,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "contributing_factors.append(f\"archetype_consistency: {archetype_consistency:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 178,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "contributing_factors.append(f\"symbolic_patterns: {pattern_score:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 183,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "contributing_factors.append(f\"narrative_contribution: {narrative_contribution:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 204,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "contributing_factors.append(f\"completion_rate: {completion_rate:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 209,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "contributing_factors.append(f\"resource_efficiency: {resource_efficiency:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 215,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "contributing_factors.append(f\"response_performance: {response_score:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 238,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "contributing_factors.append(f\"role_fulfillment: {role_fulfillment:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 243,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "contributing_factors.append(f\"trinity_collaboration: {collaboration_score:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 248,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "contributing_factors.append(f\"consensus_participation: {consensus_participation:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 269,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "contributing_factors.append(f\"story_coherence: {story_coherence:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 274,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "contributing_factors.append(f\"identity_consistency: {identity_consistency:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 279,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "contributing_factors.append(f\"behavior_predictability: {behavior_predictability:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 334,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "metrics.append(utility_metric)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 338,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "metrics.append(resource_metric)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 342,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "metrics.append(conflict_metric)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 346,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "metrics.append(obsolescence_metric)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 350,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "metrics.append(coherence_loss_metric)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 364,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "indicators.append(f\"low_usage_frequency: {usage_frequency:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 365,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "interventions.append(\"Analyze usage patterns and optimize capabilities\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 371,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "indicators.append(f\"low_success_rate: {success_rate:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 372,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "interventions.append(\"Improve task execution algorithms\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 378,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "indicators.append(f\"low_relevance: {relevance_score:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 379,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "interventions.append(\"Update capabilities to match current needs\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 402,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "indicators.append(f\"poor_cpu_efficiency: {cpu_efficiency:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 403,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "interventions.append(\"Optimize computational algorithms\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 409,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "indicators.append(f\"poor_memory_efficiency: {memory_efficiency:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 410,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "interventions.append(\"Optimize memory usage patterns\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 416,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "indicators.append(f\"poor_resource_output_ratio: {resource_output_ratio:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 417,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "interventions.append(\"Rebalance resource allocation\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 440,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "indicators.append(f\"high_conflict_generation: {conflict_count}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 441,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "interventions.append(\"Review interaction protocols and conflict resolution\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 447,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "indicators.append(f\"collaboration_problems: {collaboration_problems}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 448,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "interventions.append(\"Improve collaboration algorithms\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 454,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "indicators.append(f\"consensus_disruptions: {consensus_disruptions}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 455,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "interventions.append(\"Enhance consensus participation protocols\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 478,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "indicators.append(f\"outdated_technology: {tech_age_months} months\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 479,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "interventions.append(\"Update to current technology standards\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 485,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "indicators.append(f\"irrelevant_capabilities: {capability_relevance:.2f}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 486,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "interventions.append(\"Modernize capabilities to current requirements\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 492,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "indicators.append(\"replacement_agent_exists\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 493,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "interventions.append(\"Consider graceful migration to newer agent\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 516,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "indicators.append(f\"multiple_declining_coherence_metrics: {len(declining_metrics)}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 517,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "interventions.append(\"Address declining coherence across multiple dimensions\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 523,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "indicators.append(f\"critically_low_coherence: {len(low_coherence_metrics)} metrics\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 524,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "interventions.append(\"Immediate intervention required for low coherence areas\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 530,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "indicators.append(f\"uncertain_coherence_measurements: {len(low_confidence_metrics)}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "coherence_scoring_engine.py",
      "line_number": 531,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "interventions.append(\"Improve coherence measurement accuracy\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_mcp_agent_first_development.py",
      "line_number": 21,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append('.')",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_mcp_agent_first_development.py",
      "line_number": 179,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.generated_agents.append(generated_agent)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_mcp_agent_first_development.py",
      "line_number": 338,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "phase_results[\"generated_agents\"].append(generated_agent)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_phase_1_2.py",
      "line_number": 17,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append('.')",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_phase_3_intelligent_secrets.py",
      "line_number": 22,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append('.')",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_phase_4_1_production_integration.py",
      "line_number": 22,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append('.')",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_phase_4_2_business_enhancement.py",
      "line_number": 22,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append('.')",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_phase_4_3_runtime_governance.py",
      "line_number": 22,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append('.')",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_phase_4_4_universal_platform.py",
      "line_number": 22,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append('.')",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_phase_4_4_universal_platform.py",
      "line_number": 190,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "registration_results.append(registration_result)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_phase_4_5_advanced_symbolic_evolution.py",
      "line_number": 24,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append('.')",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_phase_4_5_advanced_symbolic_evolution.py",
      "line_number": 127,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "evolution_cycles.append(cycle_summary)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_ultra_enhanced_bootstrap.py",
      "line_number": 462,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "scored_agents.append(agent_score)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_universal_agent_platform.py",
      "line_number": 22,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append('.')",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_universal_agent_platform.py",
      "line_number": 230,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.generated_applications.append(complete_application)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "integration_phase_2_1_security_intelligence.py",
      "line_number": 21,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append('.')",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 353,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "components.append(web_file)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 363,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "api_routes.append(api_route)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 396,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "screens.append(expo_file)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 398,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "components.append(expo_file)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_coverage_audit_agent.py",
      "line_number": 480,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "report['detailed_audit'].append(audit_item)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_enhancement_coe_agent.py",
      "line_number": 59,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.proposals.append(proposal)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_enhancement_coe_agent_optimized.py",
      "line_number": 399,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "operations.append((file_path, content))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_enhancement_coe_agent_optimized.py",
      "line_number": 412,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self._created_files.append(file_path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mobile_app_enhancement_coe.py",
      "line_number": 66,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.proposals.append(proposal)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mobile_app_enhancement_coe.py",
      "line_number": 655,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "operations.append((file_path, content))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mobile_app_enhancement_coe.py",
      "line_number": 666,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self._created_files.append(file_path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "production_deploy.py",
      "line_number": 32,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "missing.append(f\"❌ {message}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "production_deploy.py",
      "line_number": 73,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append('.')",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "project_scanner.py",
      "line_number": 14,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "rules.append(data)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "project_scanner.py",
      "line_number": 25,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "matched_headers.append(rule.get(\"header\", {}))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "test_omega_agent.py",
      "line_number": 11,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "test_uap_integration.py",
      "line_number": 16,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 51,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(\"# Cursor IDE Rules\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 52,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(\"\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 53,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(\"<!-- Auto-generated by VANTA Global Rules System -->\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 54,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(\"\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 57,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(f\"## {Path(rule.original_path).stem}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 58,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(\"\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 61,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(f\"<!-- Source: {rule.original_path} -->\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 62,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(f\"<!-- Format: {rule.format.value} -->\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 64,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(f\"<!-- Includes: {len(rule.includes)} files -->\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 65,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(\"\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 71,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(converted_content)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 74,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(rule.content)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 76,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(\"\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 77,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(\"---\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 78,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(\"\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 91,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "converted.append(f\"**Rule Type:** {rule_type}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 94,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "converted.append(f\"**File Patterns:** `{patterns}`\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 96,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "converted.append(line)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 252,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "hooks[\"commit-msg\"].append(f\"# Rule from {rule.original_path}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 253,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "hooks[\"commit-msg\"].append(\"# Validate commit message format\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 255,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "hooks[\"pre-commit\"].append(f\"# Rule from {rule.original_path}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 258,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "hooks[\"pre-push\"].append(f\"# Rule from {rule.original_path}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 265,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(f\"# {hook_name.upper()} HOOK\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 267,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(\"\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 313,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(f\"root = {settings}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 314,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(\"\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 316,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(f\"[{section}]\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 319,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(f\"{key} = {value}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_format_adapters.py",
      "line_number": 320,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(\"\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_global_rules.py",
      "line_number": 275,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "resolution_errors.append(error_msg)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_global_rules.py",
      "line_number": 428,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.config['rule_roots'].append(path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_global_rules.py",
      "line_number": 686,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "validation_results[\"errors\"].append(f\"{rule_file}: {include.file_path}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_global_rules.py",
      "line_number": 689,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "validation_results[\"errors\"].append(f\"{rule_file}: {e}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_global_rules.py",
      "line_number": 840,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "resolved_rules.append(resolved)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_standardization_agent.py",
      "line_number": 173,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "components.append(component)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_standardization_agent.py",
      "line_number": 179,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "components.append(component)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_standardization_agent.py",
      "line_number": 239,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "issues.append(\"No class definition found\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_standardization_agent.py",
      "line_number": 241,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "issues.append(\"No __init__ method found\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_standardization_agent.py",
      "line_number": 243,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "issues.append(\"No async methods found\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_standardization_agent.py",
      "line_number": 249,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "issues.append(\"Missing RULE TYPE header\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_standardization_agent.py",
      "line_number": 251,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "issues.append(\"Missing FILE PATTERNS header\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_standardization_agent.py",
      "line_number": 253,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "issues.append(\"Not in MDC format\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_standardization_agent.py",
      "line_number": 257,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "issues.append(\"No scheduling logic detected\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_standardization_agent.py",
      "line_number": 400,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "suggestions.append(suggestion)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 341,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.logs_text.append(message)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\advanced_symbolic_evolution.py",
      "line_number": 619,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "mutations.append(mutation)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\advanced_symbolic_evolution.py",
      "line_number": 680,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.evolution_history.append(mutation)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\business_enhancement_engine.py",
      "line_number": 159,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "discovery_results[\"paths_scanned\"].append(str(path_obj))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\business_enhancement_engine.py",
      "line_number": 443,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "scannable_files.append(path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\business_enhancement_engine.py",
      "line_number": 450,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "scannable_files.append(file_path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\business_enhancement_engine.py",
      "line_number": 485,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "secrets_found.append(secret)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\business_enhancement_engine.py",
      "line_number": 557,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "risk_factors.append(\"Production environment\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\business_enhancement_engine.py",
      "line_number": 559,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "risk_factors.append(\"Source code exposure\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\business_enhancement_engine.py",
      "line_number": 561,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "risk_factors.append(\"Configuration file\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\business_enhancement_engine.py",
      "line_number": 563,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "risk_factors.append(\"High-value secret type\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\business_enhancement_engine.py",
      "line_number": 606,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(f\"🚨 IMMEDIATE ACTION: {critical_count} critical secrets require urgent remediation\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\business_enhancement_engine.py",
      "line_number": 609,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(f\"⚠️ HIGH PRIORITY: {high_count} high-impact secrets need vault migration\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\business_enhancement_engine.py",
      "line_number": 614,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"🔒 Implement database credential rotation\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\business_enhancement_engine.py",
      "line_number": 616,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"🔑 Establish API key management policies\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\business_enhancement_engine.py",
      "line_number": 618,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"🛡️ Secure cryptographic materials in HSM\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\business_enhancement_engine.py",
      "line_number": 670,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "assessment[\"gaps\"].append(f\"{req_id}: {requirement['description']}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\business_enhancement_engine.py",
      "line_number": 671,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "assessment[\"remediation\"].append(requirement.get(\"remediation\", \"Address compliance gap\"))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\business_enhancement_engine.py",
      "line_number": 757,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"🚨 URGENT: Compliance score below acceptable threshold\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\business_enhancement_engine.py",
      "line_number": 762,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(f\"📋 Improve {framework.upper()} compliance (currently {data['score']:.1%})\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 171,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "validation_result.failed_checks.append(\"agent_identity_verification\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 180,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "validation_result.failed_checks.append(\"rate_limit_exceeded\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 301,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.audit_chain.append(audit_record)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 437,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.action_rate_limiter[agent_id].append(current_time)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 460,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "failed_checks.append(f\"potential_injection_in_{key}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 464,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "failed_checks.append(f\"oversized_payload_in_{key}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 470,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "failed_checks.append(f\"missing_required_field_{field}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 500,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "threat_indicators.append(\"after_hours_execution\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 510,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "threat_indicators.append(\"high_activity_agent\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 516,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "threat_indicators.append(\"high_severity_action\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 521,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "threat_indicators.append(\"production_environment\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 595,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "required_approvals.append(\"multi_factor_authentication\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 600,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "required_approvals.append(\"coalition_of_experts\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 604,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "required_approvals.append(\"security_officer_review\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 608,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "required_approvals.append(\"enhanced_verification\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_action_security.py",
      "line_number": 771,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.security_events.append(security_event)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_router.py",
      "line_number": 240,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "eligible_agents.append(agent_id)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\enhanced_router.py",
      "line_number": 279,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "agent_scores.append((score, agent_id))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\identity_kernel.py",
      "line_number": 243,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.mutation_lineage.append(mutation)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\identity_kernel.py",
      "line_number": 340,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.mutation_lineage.append(MutationRecord(**mutation_data))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\identity_kernel.py",
      "line_number": 371,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append('.')",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\intelligent_vault_agent.py",
      "line_number": 261,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.security_events.append(security_event)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\intelligent_vault_agent.py",
      "line_number": 431,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "improvements.append(f\"🎲 Flagged {secret_id} for entropy improvement\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\intelligent_vault_agent.py",
      "line_number": 436,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "improvements.append(f\"⚡ Recommended caching for {secret_id} to reduce access frequency\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\intelligent_vault_agent.py",
      "line_number": 442,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "improvements.append(f\"📋 Applied compliance fixes for {secret_id}: {compliance_failures}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\intelligent_vault_agent.py",
      "line_number": 453,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "fixes.append(f\"🔄 Scheduled emergency rotation for {secret_id}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\intelligent_vault_agent.py",
      "line_number": 455,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "fixes.append(f\"📝 Enabled enhanced logging for {secret_id}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\intelligent_vault_agent.py",
      "line_number": 457,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "fixes.append(f\"🔒 Applied enhanced encryption for {secret_id}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\intelligent_vault_agent.py",
      "line_number": 469,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "actions.append(\"🚨 CRITICAL: Activate incident response protocol\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\intelligent_vault_agent.py",
      "line_number": 470,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "actions.append(\"🔒 Consider emergency rotation of all high-risk secrets\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\intelligent_vault_agent.py",
      "line_number": 472,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "actions.append(\"⚠️ HIGH: Increase monitoring and alerting\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\intelligent_vault_agent.py",
      "line_number": 473,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "actions.append(\"📊 Generate detailed threat analysis report\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\intelligent_vault_agent.py",
      "line_number": 475,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "actions.append(\"📋 MEDIUM: Review and address individual anomalies\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\intelligent_vault_agent.py",
      "line_number": 476,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "actions.append(\"🧠 Update threat detection models based on findings\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\intelligent_vault_agent.py",
      "line_number": 499,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "insights[\"optimization_trends\"].append(\"Autonomous optimization improving\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\intelligent_vault_agent.py",
      "line_number": 501,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "insights[\"patterns_discovered\"].append(\"Usage pattern learned\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_enhanced_security_hardening.py",
      "line_number": 24,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append('.')",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_enhanced_security_hardening.py",
      "line_number": 232,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "rate_limit_results.append(rate_validation.validation_status)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "demo_enhanced_security_hardening.py",
      "line_number": 300,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "security_system.audit_chain.append(fake_audit)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\production_vault_integration.py",
      "line_number": 132,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "initialization_results[\"errors\"].append(str(e))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\production_vault_integration.py",
      "line_number": 332,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "created_dirs.append(str(dir_path))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\production_vault_integration.py",
      "line_number": 358,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "available_components.append(vanta_file)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\production_vault_integration.py",
      "line_number": 613,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(f\"🚨 URGENT: {critical_count} vault files have CRITICAL risk - immediate action required\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\production_vault_integration.py",
      "line_number": 616,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(f\"⚠️ HIGH PRIORITY: {high_risk_count} vault files need security review\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\production_vault_integration.py",
      "line_number": 623,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"📊 Consider implementing vault sharding for production environment\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\runtime_governance_engine.py",
      "line_number": 243,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.decision_history.append(decision_record)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\runtime_governance_engine.py",
      "line_number": 276,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.decision_history.append(error_decision)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\runtime_governance_engine.py",
      "line_number": 526,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "applicable_rules.append(rule)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\runtime_governance_engine.py",
      "line_number": 560,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "scored_rules.append((rule, total_score))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\runtime_governance_engine.py",
      "line_number": 741,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "pattern[\"common_situations\"].append(situation_summary)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\runtime_governance_engine.py",
      "line_number": 806,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_rules.append(new_rule)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\secret_lifecycle_engine.py",
      "line_number": 249,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"🔒 Enhance secret strength - consider longer, more complex value\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\secret_lifecycle_engine.py",
      "line_number": 252,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"🎲 Increase entropy - current secret predictability is concerning\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\secret_lifecycle_engine.py",
      "line_number": 256,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"🔄 Immediate rotation required - security window closing\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\secret_lifecycle_engine.py",
      "line_number": 258,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"⏰ Schedule rotation within 7 days\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\secret_lifecycle_engine.py",
      "line_number": 262,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"⚡ Consider caching strategy to reduce direct secret access\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\secret_lifecycle_engine.py",
      "line_number": 264,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"🗑️ Evaluate if secret is still needed - consider deprecation\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\secret_lifecycle_engine.py",
      "line_number": 268,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"🚨 CRITICAL: Implement additional access controls immediately\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\secret_lifecycle_engine.py",
      "line_number": 269,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"📊 Enable enhanced monitoring and alerting\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\secret_lifecycle_engine.py",
      "line_number": 271,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"⚠️ Implement multi-factor authentication for access\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\secret_lifecycle_engine.py",
      "line_number": 275,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"📋 Review compliance requirements - gaps detected\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\secret_lifecycle_engine.py",
      "line_number": 319,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "anomalies.append(\"📈 Unusual access spike detected in last 48 hours\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\secret_lifecycle_engine.py",
      "line_number": 324,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "anomalies.append(\"🌍 New access sources detected\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\secret_lifecycle_engine.py",
      "line_number": 328,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "anomalies.append(\"⏰ Rotation window critically overdue\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\secret_lifecycle_engine.py",
      "line_number": 331,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "anomalies.append(\"🔴 Security score critically low\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\secret_lifecycle_engine.py",
      "line_number": 509,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(f\"🚨 {critical_count} critical risk secrets require immediate attention\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\secret_lifecycle_engine.py",
      "line_number": 515,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(f\"⏰ {rotation_overdue} secrets are overdue for rotation\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\simple_memory_system.py",
      "line_number": 245,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "conditions.append(f\"memory_type IN ({type_placeholders})\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\simple_memory_system.py",
      "line_number": 251,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "conditions.append(\"tags LIKE ?\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\simple_memory_system.py",
      "line_number": 252,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "params.append(f\"%{tag}%\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\simple_memory_system.py",
      "line_number": 256,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "conditions.append(\"content LIKE ?\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\simple_memory_system.py",
      "line_number": 257,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "params.append(f\"%{query}%\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\simple_memory_system.py",
      "line_number": 260,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "conditions.append(\"(expires_at IS NULL OR expires_at > ?)\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\simple_memory_system.py",
      "line_number": 261,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "params.append(datetime.now(timezone.utc).isoformat())",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\simple_memory_system.py",
      "line_number": 269,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "params.append(limit)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\simple_memory_system.py",
      "line_number": 279,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "memories.append(memory)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\unified_communication.py",
      "line_number": 510,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "inactive_agents.append(agent_id)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\universal_platform_integration.py",
      "line_number": 489,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.deployment_history.append(deployment_record)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\universal_platform_integration.py",
      "line_number": 771,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "applicable_items.append(item)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "examples\\basic_usage.py",
      "line_number": 232,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "all_rules.append(resolved)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mcp_servers\\universal_agent_platform_server.py",
      "line_number": 578,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ecosystem[\"agents\"][layer].append(agent_config)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mcp_servers\\vanta_architecture_server.py",
      "line_number": 297,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "filtered_patterns.append(asdict(pattern))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mcp_servers\\vanta_architecture_server.py",
      "line_number": 348,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "missing_vars.append(var_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mcp_servers\\vanta_architecture_server.py",
      "line_number": 505,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "results[\"issues\"].append(f\"Missing required component: {component}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mcp_servers\\vanta_architecture_server.py",
      "line_number": 511,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "results[\"issues\"].append(\"Must implement agent registration\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mcp_servers\\vanta_architecture_server.py",
      "line_number": 514,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "results[\"issues\"].append(\"Must implement message handling\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mcp_servers\\vanta_architecture_server.py",
      "line_number": 519,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "results[\"issues\"].append(\"Must implement memory storage\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "mcp_servers\\vanta_architecture_server.py",
      "line_number": 522,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "results[\"issues\"].append(\"Must implement learning recording\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "scripts\\project-scanner.py",
      "line_number": 79,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "key_files.append(file)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "scripts\\project-scanner.py",
      "line_number": 158,
      "bug_type": "inefficient_dict_iteration",
      "severity": "low",
      "description": "Iterate over dict directly instead of .keys()",
      "code_snippet": "for dep in deps.keys():",
      "suggested_fix": "Use: for key in dict instead of for key in dict.keys()",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "scripts\\project-scanner.py",
      "line_number": 220,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "integration[\"mdc_rules\"].append(str(file.relative_to(self.project_path)))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "scripts\\project-scanner.py",
      "line_number": 224,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "integration[\"uap_agents\"].append(str(uap_file.relative_to(self.project_path)))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "scripts\\project-scanner.py",
      "line_number": 245,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "integration[\"ai_capabilities\"].append(str(ai_file.relative_to(self.project_path)))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "scripts\\project-scanner.py",
      "line_number": 296,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations[\"action_items\"].append(\"STRONG MERGER CANDIDATE - High synergy potential\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "scripts\\project-scanner.py",
      "line_number": 298,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations[\"action_items\"].append(\"GOOD INTEGRATION CANDIDATE - Consider strategic partnership\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "scripts\\project-scanner.py",
      "line_number": 300,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations[\"action_items\"].append(\"LIMITED SYNERGY - Evaluate independent development\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "scripts\\project-scanner.py",
      "line_number": 304,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations[\"integration_opportunities\"].append(\"Next.js compatibility with Secrets Agent frontend\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "scripts\\project-scanner.py",
      "line_number": 307,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations[\"synergies\"].append(\"AI capabilities can enhance UAP agent intelligence\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "scripts\\project-scanner.py",
      "line_number": 310,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations[\"synergies\"].append(\"Workflow automation aligns with UAP agent orchestration\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "scripts\\run_cursor_rules_sync.py",
      "line_number": 35,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "candidates.append(dirpath)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "scripts\\run_cursor_rules_sync.py",
      "line_number": 60,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "candidates.append(os.path.abspath(resp))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "scripts\\run_cursor_rules_sync.py",
      "line_number": 99,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "project_folders.append(dirpath)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_agent_memory_system.py",
      "line_number": 145,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "memories.append(memory_id)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_agent_memory_system.py",
      "line_number": 234,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "learning_ids.append(learning_id)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_cli_enhanced.py",
      "line_number": 16,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append(str(Path(__file__).parent.parent))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_phase6_vault_access.py",
      "line_number": 17,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append(str(BASE_DIR))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 321,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "agent.discovered_components.append(test_manifest)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_standardization_agent.py",
      "line_number": 411,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "agent.discovered_components.append(complex_manifest)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_unified_communication_integration.py",
      "line_number": 68,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.messages_received.append(message)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_unified_communication_integration.py",
      "line_number": 264,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "agents.append(agent)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_unified_communication_integration.py",
      "line_number": 276,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "tasks.append(task)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_unified_communication_integration.py",
      "line_number": 285,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "results.append(result)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "tests\\test_windows_gui_enhanced.py",
      "line_number": 12,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append(str(BASE_DIR))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\test_gyp.py",
      "line_number": 99,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "tests.append(arg)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\test_gyp.py",
      "line_number": 150,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append(os.path.abspath(\"test/lib\"))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\test_gyp.py",
      "line_number": 156,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append(os.path.abspath(\"pylib\"))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\test_gyp.py",
      "line_number": 217,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.failures.append(f\"({test}) {fmt}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\graphviz.py",
      "line_number": 52,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "files[build_file].append(src)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\pretty_sln.py",
      "line_number": 32,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "built.append(project)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\pretty_sln.py",
      "line_number": 92,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "dependencies[current_project].append(results.group(1))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\pretty_sln.py",
      "line_number": 103,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_dep_array.append(project_info)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\pretty_vcproj.py",
      "line_number": 54,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "all_nodes.append((name, value))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\pretty_vcproj.py",
      "line_number": 87,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "all_attributes.append((name, value))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\pretty_vcproj.py",
      "line_number": 112,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "node_list.append(current)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\pretty_vcproj.py",
      "line_number": 126,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_list.append(filename)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\pretty_vcproj.py",
      "line_number": 128,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_list.append(os.path.abspath(filename))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\pretty_vcproj.py",
      "line_number": 173,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "unique_list.append(i)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\pretty_vcproj.py",
      "line_number": 193,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "node_array.append(current)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\tools\\pretty_vcproj.py",
      "line_number": 217,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "nodes.append(sub_node)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common.py",
      "line_number": 299,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "encoded_arguments.append(EncodePOSIXShellArgument(argument))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\common.py",
      "line_number": 516,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "result.append(item)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\easy_xml.py",
      "line_number": 53,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "xml_parts.append(\"\\n\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\easy_xml.py",
      "line_number": 82,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "xml_parts.append(indentation + \"<\" + name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\easy_xml.py",
      "line_number": 88,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "xml_parts.append(f' {at}=\"{_XmlEscape(val, attr=True)}\"')",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\easy_xml.py",
      "line_number": 91,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "xml_parts.append(\">\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\easy_xml.py",
      "line_number": 95,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "xml_parts.append(new_line)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\easy_xml.py",
      "line_number": 100,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "xml_parts.append(_XmlEscape(child_spec))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\easy_xml.py",
      "line_number": 104,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "xml_parts.append(indentation)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\easy_xml.py",
      "line_number": 105,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "xml_parts.append(f\"</{name}>{new_line}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\easy_xml.py",
      "line_number": 107,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "xml_parts.append(\"/>%s\" % new_line)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input_test.py",
      "line_number": 20,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "dependent.dependencies.append(dependency)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input_test.py",
      "line_number": 21,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "dependency.dependents.append(dependent)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 214,
      "bug_type": "inefficient_iteration",
      "severity": "low",
      "description": "Use direct iteration over container instead of range(len())",
      "code_snippet": "for i in range(len(lines)):",
      "suggested_fix": "Use: for item in container instead of for i in range(len(container))",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 285,
      "bug_type": "inefficient_iteration",
      "severity": "low",
      "description": "Use direct iteration over container instead of range(len())",
      "code_snippet": "for i in range(len(cmd_list) - 1):",
      "suggested_fix": "Use: for item in container instead of for i in range(len(container))",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 421,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "command_line.append(arg_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 424,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "command_line.append(arg_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 425,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "command_line.append(str(v))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 427,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "command_line.append(arg_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 428,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "command_line.append(str(value))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSNew.py",
      "line_number": 318,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "config_guids.append(e.get_guid())",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSProject.py",
      "line_number": 76,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.platform_section.append([\"Platform\", {\"Name\": platform}])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSProject.py",
      "line_number": 90,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.tool_files_section.append([\"ToolFile\", {\"RelativePath\": path}])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSProject.py",
      "line_number": 117,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "specification.append(t._GetSpecification())",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSProject.py",
      "line_number": 119,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "specification.append(Tool(t)._GetSpecification())",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSProject.py",
      "line_number": 131,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.configurations_section.append(spec)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSProject.py",
      "line_number": 149,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "parent.append(node)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSProject.py",
      "line_number": 184,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "parent.append(spec)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSToolFile.py",
      "line_number": 48,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.rules_section.append(rule)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSUserFile.py",
      "line_number": 52,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_args.append(arg)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSUserFile.py",
      "line_number": 138,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.configurations[config_name].append(n_cmd)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSUserFile.py",
      "line_number": 144,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "configs.append(spec)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSUtil.py",
      "line_number": 94,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_target_list.append(_ShardName(t, i))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSUtil.py",
      "line_number": 96,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_target_list.append(t)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSUtil.py",
      "line_number": 110,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_sources.append(sources[pos])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSUtil.py",
      "line_number": 122,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_dependencies.append(_ShardName(d, i))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSUtil.py",
      "line_number": 124,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_dependencies.append(d)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSUtil.py",
      "line_number": 194,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "targets_to_shim.append(t)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSUtil.py",
      "line_number": 269,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "target_dict.setdefault(\"dependencies\", []).append(full_shim_target_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSVersion.py",
      "line_number": 476,
      "bug_type": "inefficient_iteration",
      "severity": "low",
      "description": "Use direct iteration over container instead of range(len())",
      "code_snippet": "for index in range(len(keys)):",
      "suggested_fix": "Use: for item in container instead of for i in range(len(container))",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSVersion.py",
      "line_number": 507,
      "bug_type": "inefficient_iteration",
      "severity": "low",
      "description": "Use direct iteration over container instead of range(len())",
      "code_snippet": "for index in range(len(keys)):",
      "suggested_fix": "Use: for item in container instead of for i in range(len(container))",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSVersion.py",
      "line_number": 514,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "versions.append(_CreateVersion(\"2017\", path))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 123,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "append.append(element)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 407,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "defines.append(\"_MBCS\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 476,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "asmflags.append(\"/safeseh\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 552,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"/FS\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 633,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append('/DEF:\"%s\"' % def_file)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 682,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"/OUT:\" + out)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 685,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"/PDB:\" + pdb)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 688,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"/PGD:\" + pgd)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 717,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(f\"/STACK:{stack_reserve_size}{stack_commit_size}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 755,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"/DYNAMICBASE\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 762,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"/NXCOMPAT\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 813,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "flags.append(\"/MANIFESTUAC:NO\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 868,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "flags.append(\"/ALLOWISOLATION\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 916,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "rcflags.append(\"/I\" + gyp_to_ninja_path(\".\"))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\ninja_syntax.py",
      "line_number": 84,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "all_inputs.append(\"|\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\ninja_syntax.py",
      "line_number": 88,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "all_inputs.append(\"||\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 275,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "_encode_transforms.append(\"\\\\U%04x\" % i)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 336,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "that._properties[key].append(new_item)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 394,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "hashables.append(name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 495,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "children.append(self._properties[property])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 838,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self._properties[property].append(item.Copy())",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 908,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self._properties[key].append(value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1046,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "hashables.append(self.__class__.__name__ + \".name\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1047,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "hashables.append(self._properties[\"name\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1057,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "hashables.append(self.__class__.__name__ + \".path\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1058,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "hashables.append(component)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1130,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "components.append(\"$(\" + self._properties[\"sourceTree\"] + \")\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1132,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "components.append(self._properties[\"path\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1197,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "hashables.append(child_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1673,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self._properties[\"buildSettings\"][key].append(value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1926,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "paths.append(path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1932,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "paths.append(variant.FullPath())",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 1934,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "paths.append(xcfilelikeelement.FullPath())",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 2217,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "hashables.append(self._properties[\"fileType\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 2219,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "hashables.append(self._properties[\"filePatterns\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 2797,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "children.append(reference[\"ProductGroup\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 2920,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "products.append(product)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 3118,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "remote_products.append(target._properties[\"productReference\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 3183,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "objects_by_class[class_name].append(object)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 75,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "expanded_archs.append(arch)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 79,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "expanded_archs.append(arch)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 91,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "filtered_archs.append(arch)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 218,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "lst.append(format_str % str(self._Settings()[test_key]))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 220,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "lst.append(format_str % str(default))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 582,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-isysroot %s\" % sdk_root)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 585,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-I%s\" % self.header_map_path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 588,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-Wconstant-conversion\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 591,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-funsigned-char\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 594,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-fasm-blocks\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 598,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-mdynamic-no-pic\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 606,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-mpascal-strings\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 613,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-gdwarf-2\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 617,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-gdwarf-2\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 622,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-fstrict-aliasing\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 624,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-fno-strict-aliasing\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 627,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-fvisibility=hidden\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 630,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-Werror\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 633,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-Wnewline-eof\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 640,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-flto\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 667,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-arch \" + archs[0])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 671,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-msse3\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 677,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-msse4.1\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 679,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-msse4.2\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 686,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-F\" + platform_root + \"/Developer/Library/Frameworks/\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 695,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags.append(\"-F\" + directory.replace(\"$(SDKROOT)\", framework_root))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 705,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags_c.append(\"-ansi\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 723,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags_cc.append(\"-std=%s\" % clang_cxx_language_standard)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 728,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags_cc.append(\"-fno-rtti\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 730,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags_cc.append(\"-fno-exceptions\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 732,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags_cc.append(\"-fvisibility-inlines-hidden\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 734,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags_cc.append(\"-fno-threadsafe-statics\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 737,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags_cc.append(\"-Wno-invalid-offsetof\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 748,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "other_ccflags.append(flag)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 757,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "flags.append(\"-fobjc-gc\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 759,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "flags.append(\"-fobjc-gc-only\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 763,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "flags.append(\"-fobjc-arc\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 769,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "flags.append(\"-Wobjc-missing-property-synthesis\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 789,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cflags_objcc.append(\"-fobjc-call-cxx-cdtors\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 914,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(self._MapLinkerFlagFilename(ldflag, gyp_to_build_path))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 917,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"-Wl,-dead_strip\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 920,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"-Wl,-prebind\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 930,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"-isysroot \" + self._SdkPath())",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 933,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"-L\" + gyp_to_build_path(library_path))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 952,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"-arch \" + archs[0])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 956,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"-L\" + (product_dir if product_dir != \".\" else \"./\"))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 960,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"-install_name \" + install_name.replace(\" \", r\"\\ \"))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 963,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"-Wl,-rpath,\" + rpath)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 971,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"-F\" + directory.replace(\"$(SDKROOT)\", sdk_root))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 976,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"-F\" + platform_root + \"/Developer/Library/Frameworks/\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 977,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"-framework XCTest\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 987,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"-lpkstart\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 993,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"-e _NSExtensionMain\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 994,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"-fapplication-extension\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 1011,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "libtoolflags.append(libtoolflag)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 1087,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "result.append(\"echo STRIP\\\\(%s\\\\)\" % self.spec[\"target_name\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 1088,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "result.append(f\"strip {strip_flags} {output_binary}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 1109,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "result.append(\"echo DSYMUTIL\\\\(%s\\\\)\" % self.spec[\"target_name\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 1110,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "result.append(\"dsymutil {} -o {}\".format(output_binary, output + \".dSYM\"))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 1469,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "result.append((source, obj, self._Gch(lang, arch)))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 1904,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "postbuilds.append(gyp.common.EncodePOSIXShellList(postbuild[\"action\"]))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_ninja.py",
      "line_number": 218,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_target_list.append(new_target_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_ninja.py",
      "line_number": 229,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_data[main_gyp][\"targets\"].append(new_data_target)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_ninja.py",
      "line_number": 288,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_target_list.append(fully_qualified_target_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_ninja.py",
      "line_number": 298,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_data[sources_gyp][\"targets\"].append(new_data_target)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\__init__.py",
      "line_number": 51,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "build_files.append(file)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\__init__.py",
      "line_number": 221,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "flags.append(value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\__init__.py",
      "line_number": 224,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "flags.append(FormatOpt(flag, predicate(flag_value)))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\__init__.py",
      "line_number": 263,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "flags.append(FormatOpt(opt, value_predicate(value)))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\__init__.py",
      "line_number": 265,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "flags.append(FormatOpt(opt, value_predicate(os.environ.get(env_name))))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\__init__.py",
      "line_number": 270,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "flags.append(opt)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\__init__.py",
      "line_number": 494,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "home_vars.append(\"USERPROFILE\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\__init__.py",
      "line_number": 611,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "includes.append(default_include)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\__init__.py",
      "line_number": 625,
      "bug_type": "inefficient_dict_iteration",
      "severity": "low",
      "description": "Iterate over dict directly instead of .keys()",
      "code_snippet": "if DEBUG_GENERAL in gyp.debug.keys():",
      "suggested_fix": "Use: for key in dict instead of for key in dict.keys()",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\analyzer.py",
      "line_number": 168,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "result.append(source)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\analyzer.py",
      "line_number": 170,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "result.append(base_path + source)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\analyzer.py",
      "line_number": 399,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "matching_targets.append(target)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\analyzer.py",
      "line_number": 408,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "matching_targets.append(target)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\analyzer.py",
      "line_number": 413,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "targets_to_visit.append(dep)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\analyzer.py",
      "line_number": 436,
      "bug_type": "inefficient_dict_iteration",
      "severity": "low",
      "description": "Iterate over dict directly instead of .keys()",
      "code_snippet": "for target_name in all_targets.keys():",
      "suggested_fix": "Use: for key in dict instead of for key in dict.keys()",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\analyzer.py",
      "line_number": 476,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "found.append(target)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\analyzer.py",
      "line_number": 716,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "matching_target_names.append(\"all\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 412,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "components.append(component)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 494,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "outputs.append(output)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 498,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_outputs.append(\"$(%s)\" % variable)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 591,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_sources.append(source)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 593,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_sources.append(source)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 595,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_sources.append(source)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 597,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "local_files.append(os.path.normpath(os.path.join(self.path, source)))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 621,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "origin_src_dirs.append(os.path.dirname(source))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 622,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "final_generated_sources.append(local_file)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 763,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "normalized.append(path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 778,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "include_paths.append(flag[2:])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 780,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "clean_cflags.append(flag)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 812,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "static_lib_modules.append(match.group(1))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 816,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "dynamic_lib_modules.append(match.group(1))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 819,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(lib)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 841,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "link_deps.append(target_link_deps[dep])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 326,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_deps.append(action_target_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 386,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_sources.append((\"${\" + output_name + \"}\", out))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 387,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "these_outputs.append(\"${\" + output_name + \"}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 388,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "var_outputs.append(\"${\" + output_name + \"}\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 451,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_deps.append(rule_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 472,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_deps.append(copy_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 499,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "copy.cmake_inputs.append(NormjoinPathForceCMakeSource(path_to_gyp, src))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 500,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "copy.cmake_outputs.append(NormjoinPathForceCMakeSource(path_to_gyp, dst))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 501,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "copy.gyp_inputs.append(src)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 502,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "copy.gyp_outputs.append(dst)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 559,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_deps.append(copy_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 731,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "s_sources.append(src_norm_path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 733,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "c_sources.append(src_norm_path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 735,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cxx_sources.append(src_norm_path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 737,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "linkable_sources.append(src_norm_path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 739,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "other_sources.append(src_norm_path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 747,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "s_sources.append(src)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 749,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "c_sources.append(src)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 751,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cxx_sources.append(src)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 753,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "linkable_sources.append(src)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 755,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "other_sources.append(src)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 1071,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "static_deps.append(dep_cmake_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 1073,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "shared_deps.append(dep_cmake_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 1075,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "other_deps.append(dep_cmake_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\compile_commands_json.py",
      "line_number": 96,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "commands.append(dict(command=command, directory=output_dir, file=file))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\dump_dependency_json.py",
      "line_number": 92,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "edges[target].append(dep)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\dump_dependency_json.py",
      "line_number": 93,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "targets_to_visit.append(dep)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\eclipse.py",
      "line_number": 125,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "compiler_includes_list.append(include_dir)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\eclipse.py",
      "line_number": 148,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "compiler_includes_list.append(include_dir)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\eclipse.py",
      "line_number": 171,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "all_includes_list.append(compiler_include)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\eclipse.py",
      "line_number": 230,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "split_define.append(\"1\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 781,
      "bug_type": "inefficient_dict_iteration",
      "severity": "low",
      "description": "Iterate over dict directly instead of .keys()",
      "code_snippet": "for ext in COMPILABLE_EXTENSIONS.keys():",
      "suggested_fix": "Use: for key in dict instead of for key in dict.keys()",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 946,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "mac_bundle_deps.append(self.output_binary)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1120,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_outputs.append(\"$(%s)\" % outputs_variable)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1262,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_outputs.append(\"$(%s)\" % outputs_variable)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1302,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "outputs.append(output)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1306,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_outputs.append(\"$(%s)\" % variable)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1324,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "bundle_deps.append(output)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1364,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "bundle_deps.append(out)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1466,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_link_deps.append(\"$(OBJS)\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1651,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "link_deps.append(target_link_deps[dep])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1729,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(r\"-Wl,-rpath=\\$$ORIGIN/\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1730,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(r\"-Wl,-rpath-link=\\$(builddir)/\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1763,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "postbuilds.append(\"$(TARGET_POSTBUILDS_$(BUILDTYPE))\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1988,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "installable_deps.append(self.output)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 2011,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "installable_deps.append(install_path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 2030,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "installable_deps.append(self.GetSharedObjectFromSidedeck(install_path))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 2232,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "modules.append(filename[len(prefix) : -len(suffix)])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 2389,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "arguments.append(\"BUILDTYPE=\" + config)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 227,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "excluded_result.append(filename)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 229,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "result.append(filename)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 235,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "folders[s[0]].append(s[1:])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 245,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "result.append(contents)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 251,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "result.append(excluded_folder)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 266,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "result.append(contents)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 494,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "actions_dict[chosen_input].append(action)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 546,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "descriptions.append(action[\"description\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 547,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "commands.append(action[\"command\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 690,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "first_outputs.append(list(outputs)[0])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1314,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "unique_libraries_list.append(library)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1391,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "defines.append(fd)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1441,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "tool_list.append(MSVSProject.Tool(tool, settings_fixed))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1615,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "precompiled_related.append(_FixPath(f))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1644,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "excluded_configs.append((config_name, config))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1651,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "excluded_configs.append((config_name, config))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1810,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "copies.append(([src], [dst], cmd, f\"Copying {src} to {fix_dst}\"))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1842,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "children.append(folder_children)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1844,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "children.append(contents)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2282,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "source_entry.append([\"Filter\", parent_filter_name])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2283,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "source_group.append(source_entry)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2355,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "msbuild_rules.append(msbuild_rule)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2504,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "content.append(item_group)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2956,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "properties[0].append([\"PreferredToolArchitecture\", \"x64\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2960,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "properties[0].append([\"WindowsTargetPlatformVersion\", target_platform_version])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2972,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "properties[0].append([\"DefaultLanguage\", \"en-US\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2973,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "properties[0].append([\"AppContainerApplication\", \"true\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2976,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "properties[0].append([\"ApplicationTypeRevision\", app_type_revision])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2978,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "properties[0].append([\"ApplicationTypeRevision\", \"8.1\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2980,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "properties[0].append([\"ApplicationType\", \"Windows Phone\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2982,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "properties[0].append([\"ApplicationType\", \"Windows Store\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3005,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "properties[0].append([\"WindowsSDKDesktopARMSupport\", \"true\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3088,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "import_group.append([\"Import\", {\"Project\": props_file}])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3089,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sheets.append(import_group)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3193,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_paths.append(cyg_path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3197,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_paths.append(python_path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3255,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "conditions.append(condition)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3274,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "group.append({\"Label\": label})",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3311,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "group.append([name, value])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3314,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "group.append([name, {\"Condition\": condition}, value])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3336,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "tool.append([name, formatted_value])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3337,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "group.append(tool)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3338,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "groups.append(group)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3457,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "value.append(\"%%(%s)\" % name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3498,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "missing_sources.append(full_path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3539,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sources.append([\"ItemGroup\"] + grouped_sources[g])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3541,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sources.append([\"ItemGroup\"] + actions_spec)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3573,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "detail.append([\"ExcludedFromBuild\", \"true\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3616,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "detail.append([\"PrecompiledHeader\", \"\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3617,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "detail.append([\"ForcedIncludeFiles\", \"\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3635,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "detail.append([\"ObjectFileName\", \"$(IntDir)\\\\\" + file_name])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3636,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "grouped_sources[group].append([element, {\"Include\": source}] + detail)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3669,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "project_ref.append([\"UseLibraryDependencyInputs\", \"true\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3673,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "project_ref.append([\"UseLibraryDependencyInputs\", \"false\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3675,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "group.append(project_ref)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3676,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "references.append(group)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3847,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "build_target.append([\"Exec\", {\"Command\": build_cmd}])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3853,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "clean_target.append([\"Exec\", {\"Command\": clean_cmd}])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3867,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "clcompile_target.append([\"Exec\", {\"Command\": clcompile_cmd}])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3868,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "targets.append(clcompile_target)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3876,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extensions.append([\"Import\", {\"Project\": props_file}])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3883,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "targets_node.append([\"Import\", {\"Project\": targets_file}])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3918,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "descriptions.append(action[\"description\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3928,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "commands.append(cmd)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3980,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "action_spec.append([\"AdditionalInputs\", additional_inputs])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3981,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "actions_spec.append(action_spec)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 442,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "actions_depends.append(target.PreActionInput(self.flavor))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 443,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "compile_depends.append(target.PreCompileInput())",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 540,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "mac_bundle_depends.append(output)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 571,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "vars.append((\"outdir\", outdir))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 572,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "vars.append((\"idlflags\", flags))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 787,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_bindings.append((\"root\", cygwin_munge(root)))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 803,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_bindings.append((\"source\", cygwin_munge(source_expanded)))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 805,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_bindings.append((\"ext\", ext))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 807,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_bindings.append((\"name\", cygwin_munge(basename)))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 859,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "mac_bundle_depends.append(dst)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 913,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "bundle_depends.append(output)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 915,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "xcassets.append(res)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 952,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "outputs.append(partial_info_plist)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1010,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "bundle_depends.append(out)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1267,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "outputs.append(output)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1338,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_bindings.append((\"lib\", output))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1403,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "link_deps.append(new_dep)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1411,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_bindings.append((\"ld\", \"$ldxx\"))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1471,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(r\"-Wl,-rpath=\\$$ORIGIN/%s\" % rpath)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1473,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"-Wl,-rpath=%s\" % self.target_rpath)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1474,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ldflags.append(\"-Wl,-rpath-link=%s\" % rpath)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1507,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_bindings.append((\"soname\", os.path.split(output)[1]))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1508,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_bindings.append((\"lib\", gyp.common.EncodePOSIXShellArgument(output)))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1530,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_bindings.append((\"binary\", output))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1544,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(pdbname)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1550,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "extra_bindings.append((\"binary\", output))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1597,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "variables.append((\"libtool_flags\", libtool_flags))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1602,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "variables.append((\"libflags\", libflags))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1626,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "inputs.append(output)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1670,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "variables.append((\"version\", self.xcode_settings.GetFrameworkVersion()))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1722,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "variables.append((\"postbuilds\", postbuild))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 2846,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "target_short_names.setdefault(name, []).append(target)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 150,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "configurations.append(name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 248,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "targets.append(xcode_target)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 249,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "ordinary_targets.append(xcode_target)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 251,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "support_targets.append(xcode_target.support_target)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 252,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "targets.append(xcode_target.support_target)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 255,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "targets_for_all.append(xcode_target)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 337,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "targets.append(run_target)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 338,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "run_test_targets.append(run_target)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 416,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "all_run_tests.append(dependency_xct.test_runner)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 442,
      "bug_type": "inefficient_dict_iteration",
      "severity": "low",
      "description": "Iterate over dict directly instead of .keys()",
      "code_snippet": "for other_pbxproject in self.project._other_pbxprojects.keys():",
      "suggested_fix": "Use: for key in dict instead of for key in dict.keys()",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 712,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "configuration_names.append(configuration_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 1033,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "concrete_outputs_for_this_rule_source.append(concrete_output)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 1062,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "messages.append(message)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 1068,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "actions.append(action)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 1132,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "concrete_output_dirs.append(concrete_output_dir)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\xcode.py",
      "line_number": 1385,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "build_files.append(build_file)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 33,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "keys.append(i)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 40,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "keys.append(key)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 53,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "input.append(value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 55,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "known.key.append(value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 56,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "known.value.append(index)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 69,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "known.append(value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 72,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "known.append(value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 90,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(_relate(known, input, val))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 121,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "wrapped.append(_wrap(value))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 126,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "input.append(value.value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 128,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "input.append(value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 147,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(_transform(known, input, input[i]))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\agents\\cursor_rules_sync_agent.py",
      "line_number": 281,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "scan_result.directories_scanned.append(str(rel_path))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\agents\\cursor_rules_sync_agent.py",
      "line_number": 289,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "scan_result.missing_cursor_dirs.append(str(rel_path))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\agents\\cursor_rules_sync_agent.py",
      "line_number": 292,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "scan_result.missing_rules_dirs.append(str(rel_path))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\agents\\cursor_rules_sync_agent.py",
      "line_number": 433,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "template.inherits_from.append(\"indexed_component\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\agents\\cursor_rules_sync_agent.py",
      "line_number": 563,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "role_groups[key].append(context)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\agents\\cursor_rules_sync_agent.py",
      "line_number": 580,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.symlink_candidates.append((base_cursor, other_context.path / \".cursor\"))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\agents\\cursor_rules_sync_agent.py",
      "line_number": 582,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.symlink_candidates.append((base_rules, other_context.path / \".rules\"))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\agents\\cursor_rules_sync_agent.py",
      "line_number": 620,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "synced.append(str(child_rules))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\core\\vanta_master_core.py",
      "line_number": 127,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "shutdown_tasks.append(self._shutdown_agent_async(agent_id, agent_instance))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 212,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.historical_decisions.append(decision)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 251,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "similar_outcomes.append(decision.actual_outcome)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 285,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "reasoning_scores.append(quality['overall'])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 354,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "risk_scores.append(risk_map.get(risk_data['overall_risk'].lower(), 0.5))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 585,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "conditions.append(\"Achieve stronger expert consensus\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 588,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "conditions.append(\"Provide more detailed reasoning and evidence\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 591,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "conditions.append(\"Include additional expert perspectives\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 594,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "conditions.append(\"Address factors reducing success probability\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 603,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "requirements.append(\"Enhanced milestone reviews\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 606,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "requirements.append(\"Ongoing expert consultation\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 609,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "requirements.append(\"Early warning system for issues\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 618,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "mitigations.append(\"Develop comprehensive contingency plans\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 621,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "mitigations.append(\"Establish expert review board for ongoing decisions\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 624,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "mitigations.append(\"Implement phased rollout with go/no-go gates\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\rollback_recovery_manager.py",
      "line_number": 330,
      "bug_type": "inefficient_dict_iteration",
      "severity": "low",
      "description": "Iterate over dict directly instead of .keys()",
      "code_snippet": "for check_id in self.health_checks.keys():",
      "suggested_fix": "Use: for key in dict instead of for key in dict.keys()",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\rollback_recovery_manager.py",
      "line_number": 333,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "results.append(result)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\rollback_recovery_manager.py",
      "line_number": 373,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "violations.append(f\"{metric} exceeds maximum ({value} > {threshold['max']})\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\rollback_recovery_manager.py",
      "line_number": 375,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "violations.append(f\"{metric} below minimum ({value} < {threshold['min']})\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\rollback_recovery_manager.py",
      "line_number": 378,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "violations.append(f\"{metric} exceeds threshold ({value} > {threshold})\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\rollback_recovery_manager.py",
      "line_number": 782,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.rollback_events.append(event)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\agents\\OperatorOmegaAgent.py",
      "line_number": 30,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'UAP', 'runners'))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\agents\\OperatorOmegaAgent.py",
      "line_number": 389,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "deployment_result['deployments'].append(project_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\agents\\OperatorOmegaAgent.py",
      "line_number": 392,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "deployment_result['failures'].append(project_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\agents\\OperatorOmegaAgent.py",
      "line_number": 416,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "distribution_result['vault_setups'].append(project_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\agents\\OperatorOmegaAgent.py",
      "line_number": 422,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "distribution_result['access_granted'].append(project_name)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\services\\AgentDiscoveryService.py",
      "line_number": 174,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "agents.append(agent_info)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\services\\AgentDiscoveryService.py",
      "line_number": 188,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "uap_agents.append(uap_info)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\services\\AgentDiscoveryService.py",
      "line_number": 197,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "uap_agents.append(uap_info)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\services\\AgentDiscoveryService.py",
      "line_number": 210,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "orchestrators.append(omega_info)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\services\\AgentDiscoveryService.py",
      "line_number": 223,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "orchestrators.append(orchestrator_info)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\services\\AgentDiscoveryService.py",
      "line_number": 237,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "governance_agents.append(gov_info)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\services\\AgentDiscoveryService.py",
      "line_number": 373,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "orchestrator_info[\"runtime_capabilities\"].append(\"ecosystem_management\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\services\\AgentDiscoveryService.py",
      "line_number": 375,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "orchestrator_info[\"runtime_capabilities\"].append(\"cross_project_coordination\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\services\\AgentDiscoveryService.py",
      "line_number": 377,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "orchestrator_info[\"runtime_capabilities\"].append(\"agent_bus_integration\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\services\\AgentDiscoveryService.py",
      "line_number": 379,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "orchestrator_info[\"runtime_capabilities\"].append(\"vault_integration\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\services\\AgentDiscoveryService.py",
      "line_number": 410,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "gov_info[\"governance_scope\"].append(\"policy_enforcement\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\services\\AgentDiscoveryService.py",
      "line_number": 412,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "gov_info[\"governance_scope\"].append(\"compliance_validation\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\services\\AgentDiscoveryService.py",
      "line_number": 414,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "gov_info[\"governance_scope\"].append(\"integration_management\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "src\\utils\\logger.py",
      "line_number": 138,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.audit_entries.append(entry)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "reference software code\\awesome-mcp-servers\\supertoolkit-mcp\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 33,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "keys.append(i)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "reference software code\\awesome-mcp-servers\\supertoolkit-mcp\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 40,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "keys.append(key)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "reference software code\\awesome-mcp-servers\\supertoolkit-mcp\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 53,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "input.append(value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "reference software code\\awesome-mcp-servers\\supertoolkit-mcp\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 55,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "known.key.append(value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "reference software code\\awesome-mcp-servers\\supertoolkit-mcp\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 56,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "known.value.append(index)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "reference software code\\awesome-mcp-servers\\supertoolkit-mcp\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 69,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "known.append(value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "reference software code\\awesome-mcp-servers\\supertoolkit-mcp\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 72,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "known.append(value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "reference software code\\awesome-mcp-servers\\supertoolkit-mcp\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 90,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(_relate(known, input, val))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "reference software code\\awesome-mcp-servers\\supertoolkit-mcp\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 121,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "wrapped.append(_wrap(value))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "reference software code\\awesome-mcp-servers\\supertoolkit-mcp\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 126,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "input.append(value.value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "reference software code\\awesome-mcp-servers\\supertoolkit-mcp\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 128,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "input.append(value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "reference software code\\awesome-mcp-servers\\supertoolkit-mcp\\node_modules\\flatted\\python\\flatted.py",
      "line_number": 147,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(_transform(known, input, input[i]))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "node_modules\\flatted\\python\\flatted.py",
      "line_number": 33,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "keys.append(i)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "node_modules\\flatted\\python\\flatted.py",
      "line_number": 40,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "keys.append(key)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "node_modules\\flatted\\python\\flatted.py",
      "line_number": 53,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "input.append(value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "node_modules\\flatted\\python\\flatted.py",
      "line_number": 55,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "known.key.append(value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "node_modules\\flatted\\python\\flatted.py",
      "line_number": 56,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "known.value.append(index)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "node_modules\\flatted\\python\\flatted.py",
      "line_number": 69,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "known.append(value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "node_modules\\flatted\\python\\flatted.py",
      "line_number": 72,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "known.append(value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "node_modules\\flatted\\python\\flatted.py",
      "line_number": 90,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(_relate(known, input, val))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "node_modules\\flatted\\python\\flatted.py",
      "line_number": 121,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "wrapped.append(_wrap(value))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "node_modules\\flatted\\python\\flatted.py",
      "line_number": 126,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "input.append(value.value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "node_modules\\flatted\\python\\flatted.py",
      "line_number": 128,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "input.append(value)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "node_modules\\flatted\\python\\flatted.py",
      "line_number": 147,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "output.append(_transform(known, input, input[i]))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "governance\\integration\\omega_executor.py",
      "line_number": 329,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "required_approvals.append('governance_team')",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "governance\\integration\\omega_executor.py",
      "line_number": 332,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "required_approvals.append('security_team')",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "governance\\integration\\omega_executor.py",
      "line_number": 392,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "plan['security_checks'].append(modification.get('security_requirement'))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "governance\\integration\\omega_executor.py",
      "line_number": 398,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "plan['coordination_requirements'].append(modification.get('coordination_rule'))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 164,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "included.append(build_file_path)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 205,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "kp.append(key)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 212,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "kp.append(repr(index))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 213,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "children.append(CheckNode(child, kp))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 285,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "includes_list.append(relative_include)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 293,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "aux_data[subdict_path][\"included\"].append(include)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 333,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_target_list.append(target)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 347,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_target_list.append(new_target)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 349,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_target_list.append(target)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 420,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "build_file_data[\"included_files\"].append(included_relative)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 601,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "self.dependencies.append(new_dependency)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 679,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "stack.append(char)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 937,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "sys.path.append(os.getcwd())",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1740,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "results.append([child] + path[: path.index(child) + 1])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1758,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "dependencies.append(dependency.ref)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1964,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "root_node.dependents.append(target_node)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1973,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "target_node.dependencies.append(dependency_node)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1974,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "dependency_node.dependents.append(target_node)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1986,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "target_node.dependencies.append(root_node)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1987,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "root_node.dependents.append(target_node)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1992,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cycles.append(\"Cycle: %s\" % \" -> \".join(paths))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2030,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "build_file_node.dependencies.append(dependency_node)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2031,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "dependency_node.dependents.append(build_file_node)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2037,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "build_file_node.dependencies.append(root_node)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2038,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "root_node.dependents.append(build_file_node)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2049,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "file_node.dependencies.append(root_node)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2050,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "root_node.dependents.append(file_node)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2054,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "cycles.append(\"Cycle: %s\" % \" -> \".join(paths))",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2166,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "target_dict[\"dependencies\"].append(dependency)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2275,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "to.append(to_item)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2485,
      "bug_type": "inefficient_dict_iteration",
      "severity": "low",
      "description": "Iterate over dict directly instead of .keys()",
      "code_snippet": "for configuration in merged_configurations.keys():",
      "suggested_fix": "Use: for key in dict instead of for key in dict.keys()",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2507,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "delete_keys.append(key)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2512,
      "bug_type": "inefficient_dict_iteration",
      "severity": "low",
      "description": "Iterate over dict directly instead of .keys()",
      "code_snippet": "for configuration in target_dict[\"configurations\"].keys():",
      "suggested_fix": "Use: for key in dict instead of for key in dict.keys()",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2514,
      "bug_type": "inefficient_dict_iteration",
      "severity": "low",
      "description": "Iterate over dict directly instead of .keys()",
      "code_snippet": "for key in configuration_dict.keys():",
      "suggested_fix": "Use: for key in dict instead of for key in dict.keys()",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2570,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "del_lists.append(key)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2586,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "lists.append(list_key)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2672,
      "bug_type": "inefficient_iteration",
      "severity": "low",
      "description": "Use direct iteration over container instead of range(len())",
      "code_snippet": "for index in range(len(list_actions) - 1, -1, -1):",
      "suggested_fix": "Use: for item in container instead of for i in range(len(container))",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2795,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "rule_sources.append(source)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2914,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "new_targets.append(target)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\ritual_upkeep_agent.py",
      "line_number": 103,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "findings.append({\"type\": \"MDC_Source_Comparison_AgentContract\", \"report\": comparison_report_agent_contract})",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\ritual_upkeep_agent.py",
      "line_number": 106,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "findings.append({\"type\": \"OrphanedCascadeTriggers\", \"report\": orphaned_triggers})",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\ritual_upkeep_agent.py",
      "line_number": 130,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "# if conceptual_details: mdc_files_details.append(conceptual_details)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\ritual_upkeep_agent.py",
      "line_number": 133,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "rules_analysis.append({\"file\": mdc_file_path, \"status\": \"pending_tool_integration_for_metadata\"})",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\ritual_upkeep_agent.py",
      "line_number": 139,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "rules_analysis.append({\"path\": self.mdc_rules_path, \"status\": \"pending_tool_integration_for_listing_and_reading\"})",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\ritual_upkeep_agent.py",
      "line_number": 155,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "#         stale_candidates.append(file_detail[\"path\"])",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\ritual_upkeep_agent.py",
      "line_number": 158,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "#     rules_analysis.append(analysis)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": ".cursor\\agents\\ritual_upkeep_agent.py",
      "line_number": 253,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "orphaned_reports.append({\"file\": self.agent_cascade_file, \"status\": \"error_parsing_cascade_file\", \"details\": \"Could not parse cascade definitions. Orphan check incomplete.\"})",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "extension_api\\vscode\\server.py",
      "line_number": 151,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "tool_paths.append(tool)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "collapse_mermaid.py",
      "line_number": 16,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "nodes.append(f'{version}[\"{label}\"]')",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "collapse_mermaid.py",
      "line_number": 18,
      "bug_type": "inefficient_iteration",
      "severity": "low",
      "description": "Use direct iteration over container instead of range(len())",
      "code_snippet": "for i in range(len(nodes) - 1):",
      "suggested_fix": "Use: for item in container instead of for i in range(len(container))",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "collapse_mermaid.py",
      "line_number": 19,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "edges.append(f'{log[\"history\"][i][\"version\"]} --> {log[\"history\"][i + 1][\"version\"]}')",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\memory_system.py",
      "line_number": 285,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "memories.append(memory)",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\memory_system.py",
      "line_number": 548,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"Consider increasing training data quality or quantity\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\memory_system.py",
      "line_number": 551,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"Agent shows strong learning progress - consider advanced tasks\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\memory_system.py",
      "line_number": 557,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"Learning appears uneven across task types - balance training\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\memory_system.py",
      "line_number": 560,
      "bug_type": "inefficient_list_append",
      "severity": "low",
      "description": "Consider list comprehension or extend() for better performance",
      "code_snippet": "recommendations.append(\"Learning progress appears normal - continue current approach\")",
      "suggested_fix": "Use list comprehension: [item for item in iterable]",
      "expert_agent": "performance_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 386,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'run_with_secrets' has too many parameters (6)",
      "code_snippet": "def run_with_secrets(ctx, environment, key_pattern, ttl, inject_as, command_with_args):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "cli_enhanced.py",
      "line_number": 1114,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'audit' has too many parameters (8)",
      "code_snippet": "def audit(ctx, project_path, max_iterations, platforms, coverage_threshold, enable_rl, governance, dry_run):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "interface_enhancement_coe_agent_optimized.py",
      "line_number": 44,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '__init__' has too many parameters (9)",
      "code_snippet": "    def __init__(self, id: str, type: str, context: Dict[str, Any], ",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 142,
      "bug_type": "long_function",
      "severity": "medium",
      "description": "Function '_init_ui' is too long (66 statements)",
      "code_snippet": "    def _init_ui(self):",
      "suggested_fix": "Break function into smaller, more focused functions",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "windows_gui_enhanced.py",
      "line_number": 297,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'start_api_call' has too many parameters (7)",
      "code_snippet": "    def start_api_call(self, endpoint, method='get', payload=None, params=None, on_success=None, on_error=None):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\identity_kernel.py",
      "line_number": 147,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'add_anchor_trait' has too many parameters (6)",
      "code_snippet": "    def add_anchor_trait(self, trait_id: str, name: str, value: Any, ",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\simple_memory_system.py",
      "line_number": 135,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'store_memory' has too many parameters (7)",
      "code_snippet": "    def store_memory(self, memory_type: MemoryType, content: Dict[str, Any], ",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\unified_communication.py",
      "line_number": 41,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '__init__' has too many parameters (8)",
      "code_snippet": "    def __init__(self, ",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "agent_core\\unified_communication.py",
      "line_number": 87,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '__init__' has too many parameters (6)",
      "code_snippet": "    def __init__(self, agent_id: str, agent_type: str, capabilities: List[str] = None,",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 223,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'LoadOneBuildFile' has too many parameters (6)",
      "code_snippet": "def LoadOneBuildFile(build_file_path, data, aux_data, includes, is_target, check):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 271,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'LoadBuildFileIncludesIntoDict' has too many parameters (6)",
      "code_snippet": "def LoadBuildFileIncludesIntoDict(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 362,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'LoadTargetBuildFile' has too many parameters (8)",
      "code_snippet": "def LoadTargetBuildFile(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 500,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'CallLoadTargetBuildFile' has too many parameters (7)",
      "code_snippet": "def CallLoadTargetBuildFile(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 607,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'LoadTargetBuildFilesParallel' has too many parameters (7)",
      "code_snippet": "def LoadTargetBuildFilesParallel(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 1165,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'EvalSingleCondition' has too many parameters (6)",
      "code_snippet": "def EvalSingleCondition(cond_expr, true_dict, false_dict, phase, variables, build_file):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2220,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'MergeLists' has too many parameters (6)",
      "code_snippet": "def MergeLists(to, fro, to_file, fro_file, is_paths=False, append=True):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\input.py",
      "line_number": 2967,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'Load' has too many parameters (9)",
      "code_snippet": "def Load(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\mac_tool.py",
      "line_number": 442,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'ExecCodeSignBundle' has too many parameters (6)",
      "code_snippet": "    def ExecCodeSignBundle(self, key, entitlements, provisioning, path, preserve):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSNew.py",
      "line_number": 78,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '__init__' has too many parameters (6)",
      "code_snippet": "    def __init__(self, path, name=None, entries=None, guid=None, items=None):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSNew.py",
      "line_number": 118,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '__init__' has too many parameters (9)",
      "code_snippet": "    def __init__(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSNew.py",
      "line_number": 193,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '__init__' has too many parameters (6)",
      "code_snippet": "    def __init__(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSProject.py",
      "line_number": 54,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '__init__' has too many parameters (6)",
      "code_snippet": "    def __init__(self, project_path, version, name, guid=None, platforms=None):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSToolFile.py",
      "line_number": 24,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'AddCustomBuildRule' has too many parameters (7)",
      "code_snippet": "    def AddCustomBuildRule(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\MSVSVersion.py",
      "line_number": 22,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '__init__' has too many parameters (11)",
      "code_snippet": "    def __init__(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 301,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '_GetAndMunge' has too many parameters (7)",
      "code_snippet": "    def _GetAndMunge(self, field, path, default, prefix, append, map):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 356,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '_Setting' has too many parameters (7)",
      "code_snippet": "    def _Setting(self, path, config, default=None, prefix=\"\", append=None, map=None):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 362,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '_ConfigAttrib' has too many parameters (7)",
      "code_snippet": "    def _ConfigAttrib(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 646,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'GetLdflags' has too many parameters (8)",
      "code_snippet": "    def GetLdflags(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 779,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '_GetLdManifestFlags' has too many parameters (6)",
      "code_snippet": "    def _GetLdManifestFlags(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 1032,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '__init__' has too many parameters (6)",
      "code_snippet": "    def __init__(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\msvs_emulation.py",
      "line_number": 1066,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'GetFlagsModifications' has too many parameters (8)",
      "code_snippet": "    def GetFlagsModifications(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\ninja_syntax.py",
      "line_number": 42,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'rule' has too many parameters (11)",
      "code_snippet": "    def rule(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\ninja_syntax.py",
      "line_number": 74,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'build' has too many parameters (7)",
      "code_snippet": "    def build(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\win_tool.py",
      "line_number": 152,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'ExecLinkWithManifests' has too many parameters (9)",
      "code_snippet": "    def ExecLinkWithManifests(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\win_tool.py",
      "line_number": 273,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'ExecMidlWrapper' has too many parameters (9)",
      "code_snippet": "    def ExecMidlWrapper(self, arch, outdir, tlb, h, dlldata, iid, proxy, idl, *flags):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcode_emulation.py",
      "line_number": 1236,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'AddImplicitPostbuilds' has too many parameters (6)",
      "code_snippet": "    def AddImplicitPostbuilds(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\__init__.py",
      "line_number": 55,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'Load' has too many parameters (8)",
      "code_snippet": "def Load(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\analyzer.py",
      "line_number": 340,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '_GenerateTargets' has too many parameters (6)",
      "code_snippet": "def _GenerateTargets(data, target_list, target_dicts, toplevel_dir, files, build_files):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\analyzer.py",
      "line_number": 632,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '__init__' has too many parameters (9)",
      "code_snippet": "    def __init__(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 111,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'Write' has too many parameters (10)",
      "code_snippet": "    def Write(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 888,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'WriteTarget' has too many parameters (7)",
      "code_snippet": "    def WriteTarget(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\android.py",
      "line_number": 967,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'WriteList' has too many parameters (6)",
      "code_snippet": "    def WriteList(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 247,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'WriteActions' has too many parameters (6)",
      "code_snippet": "def WriteActions(target_name, actions, extra_sources, extra_deps, path_to_gyp, output):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 336,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'WriteRules' has too many parameters (6)",
      "code_snippet": "def WriteRules(target_name, rules, extra_sources, extra_deps, path_to_gyp, output):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 624,
      "bug_type": "long_function",
      "severity": "medium",
      "description": "Function 'WriteTarget' is too long (75 statements)",
      "code_snippet": "def WriteTarget(",
      "suggested_fix": "Break function into smaller, more focused functions",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\cmake.py",
      "line_number": 624,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'WriteTarget' has too many parameters (10)",
      "code_snippet": "def WriteTarget(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\eclipse.py",
      "line_number": 78,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'GetAllIncludeDirectories' has too many parameters (6)",
      "code_snippet": "def GetAllIncludeDirectories(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\eclipse.py",
      "line_number": 201,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'GetAllDefines' has too many parameters (6)",
      "code_snippet": "def GetAllDefines(target_list, target_dicts, data, config_name, params, compiler_path):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\eclipse.py",
      "line_number": 333,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'GenerateCdtSettingsFile' has too many parameters (8)",
      "code_snippet": "def GenerateCdtSettingsFile(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 819,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'Write' has too many parameters (7)",
      "code_snippet": "    def Write(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1000,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'WriteActions' has too many parameters (6)",
      "code_snippet": "    def WriteActions(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1125,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'WriteRules' has too many parameters (6)",
      "code_snippet": "    def WriteRules(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1366,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'WriteSources' has too many parameters (8)",
      "code_snippet": "    def WriteSources(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 1674,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'WriteTarget' has too many parameters (8)",
      "code_snippet": "    def WriteTarget(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 2073,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'WriteDoCmd' has too many parameters (7)",
      "code_snippet": "    def WriteDoCmd(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\make.py",
      "line_number": 2100,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'WriteMakeRule' has too many parameters (9)",
      "code_snippet": "    def WriteMakeRule(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 214,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '__init__' has too many parameters (10)",
      "code_snippet": "    def __init__(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 290,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'ExpandRuleVariables' has too many parameters (7)",
      "code_snippet": "    def ExpandRuleVariables(self, path, root, dirname, source, ext, name):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 686,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'WriteRules' has too many parameters (6)",
      "code_snippet": "    def WriteRules(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1012,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'WriteSources' has too many parameters (8)",
      "code_snippet": "    def WriteSources(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1057,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'WriteSourcesForArch' has too many parameters (9)",
      "code_snippet": "    def WriteSourcesForArch(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1307,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'WriteLink' has too many parameters (6)",
      "code_snippet": "    def WriteLink(self, spec, config_name, config, link_deps, compile_deps):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1349,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'WriteLinkForArch' has too many parameters (8)",
      "code_snippet": "    def WriteLinkForArch(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1572,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'WriteTarget' has too many parameters (6)",
      "code_snippet": "    def WriteTarget(self, spec, config_name, config, link_deps, compile_deps):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1716,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'AppendPostbuildVariable' has too many parameters (6)",
      "code_snippet": "    def AppendPostbuildVariable(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 1901,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'WriteNewNinjaRule' has too many parameters (8)",
      "code_snippet": "    def WriteNewNinjaRule(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\ninja.py",
      "line_number": 2212,
      "bug_type": "long_function",
      "severity": "medium",
      "description": "Function 'GenerateOutputForConfig' is too long (56 statements)",
      "code_snippet": "def GenerateOutputForConfig(target_list, target_dicts, data, params, config_name):",
      "suggested_fix": "Break function into smaller, more focused functions",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 2342,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '__init__' has too many parameters (7)",
      "code_snippet": "    def __init__(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\xcodeproj_file.py",
      "line_number": 2489,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '__init__' has too many parameters (7)",
      "code_snippet": "    def __init__(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\core\\vanta_master_core.py",
      "line_number": 222,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'publish_task_assignment_event' has too many parameters (7)",
      "code_snippet": "    def publish_task_assignment_event(self, task_id: str, agent_id_assigned_to: str, task_type: str, parameters: Dict[str, Any], priority: int = 3, source_agent_id: str = \"VantaMasterCore\"):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_seed\\core\\vanta_master_core.py",
      "line_number": 238,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function 'publish_task_completion_event' has too many parameters (7)",
      "code_snippet": "    def publish_task_completion_event(self, task_id: str, source_agent_id_completed_by: str, status: str, duration_ms: int, result: Optional[Dict[str, Any]] = None, error_details: Optional[Dict[str, Any]] = None):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "vanta_2_0\\src\\core\\decision_confidence_scoring.py",
      "line_number": 370,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '_calculate_overall_confidence' has too many parameters (6)",
      "code_snippet": "    def _calculate_overall_confidence(self, ",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 362,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '_BuildCommandLineForRuleRaw' has too many parameters (6)",
      "code_snippet": "def _BuildCommandLineForRuleRaw(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 497,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '_AddCustomBuildToolForMSVS' has too many parameters (7)",
      "code_snippet": "def _AddCustomBuildToolForMSVS(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 661,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '_GenerateExternalRules' has too many parameters (6)",
      "code_snippet": "def _GenerateExternalRules(rules, output_dir, spec, sources, options, actions_to_add):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 897,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '_GenerateRulesForMSVS' has too many parameters (7)",
      "code_snippet": "def _GenerateRulesForMSVS(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1445,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '_AddConfigurationToMSVS' has too many parameters (6)",
      "code_snippet": "def _AddConfigurationToMSVS(p, spec, tools, config, config_type, config_name):",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 1533,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '_AdjustSourcesAndConvertToFilterHierarchy' has too many parameters (7)",
      "code_snippet": "def _AdjustSourcesAndConvertToFilterHierarchy(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2182,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '_GenerateMSBuildFiltersFile' has too many parameters (6)",
      "code_snippet": "def _GenerateMSBuildFiltersFile(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2228,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '_AppendFiltersForMSBuild' has too many parameters (8)",
      "code_snippet": "def _AppendFiltersForMSBuild(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 2329,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '_GenerateRulesForMSBuild' has too many parameters (10)",
      "code_snippet": "def _GenerateRulesForMSBuild(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3502,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '_GetMSBuildSources' has too many parameters (8)",
      "code_snippet": "def _GetMSBuildSources(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3545,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '_AddSources2' has too many parameters (8)",
      "code_snippet": "def _AddSources2(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3680,
      "bug_type": "long_function",
      "severity": "medium",
      "description": "Function '_GenerateMSBuildProject' is too long (53 statements)",
      "code_snippet": "def _GenerateMSBuildProject(project, options, version, generator_flags, spec):",
      "suggested_fix": "Break function into smaller, more focused functions",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "__graveyard__\\20250605\\broken-typescript\\node_modules\\node-gyp\\gyp\\pylib\\gyp\\generator\\msvs.py",
      "line_number": 3952,
      "bug_type": "too_many_parameters",
      "severity": "medium",
      "description": "Function '_AddMSBuildAction' has too many parameters (8)",
      "code_snippet": "def _AddMSBuildAction(",
      "suggested_fix": "Consider using a configuration object or breaking the function apart",
      "expert_agent": "quality_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 3,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: from setuptools import setup, find_packages",
      "code_snippet": "from setuptools import setup, find_packages",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 5,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: setup(",
      "code_snippet": "setup(",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 6,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: name=\"secrets_agent\",",
      "code_snippet": "name=\"secrets_agent\",",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 7,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: version=\"2.2.1\",",
      "code_snippet": "version=\"2.2.1\",",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 8,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: packages=find_packages(),",
      "code_snippet": "packages=find_packages(),",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 9,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: include_package_data=True,",
      "code_snippet": "include_package_data=True,",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 10,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: install_requires=[",
      "code_snippet": "install_requires=[",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 11,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: \"pyyaml\",",
      "code_snippet": "\"pyyaml\",",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 12,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: \"watchdog\",",
      "code_snippet": "\"watchdog\",",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 13,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: \"cryptography\",",
      "code_snippet": "\"cryptography\",",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 14,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: \"flask\",",
      "code_snippet": "\"flask\",",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 15,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: \"requests\",",
      "code_snippet": "\"requests\",",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 16,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: \"python-dotenv\",",
      "code_snippet": "\"python-dotenv\",",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 17,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: ],",
      "code_snippet": "],",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 18,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: entry_points={",
      "code_snippet": "entry_points={",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 19,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: \"console_scripts\": [",
      "code_snippet": "\"console_scripts\": [",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 20,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: \"vanta=cli:main\",",
      "code_snippet": "\"vanta=cli:main\",",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 21,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: ],",
      "code_snippet": "],",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 22,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: },",
      "code_snippet": "},",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    },
    {
      "file_path": "setup.py",
      "line_number": 23,
      "bug_type": "unpinned_dependency",
      "severity": "medium",
      "description": "Unpinned dependency: )",
      "code_snippet": ")",
      "suggested_fix": "Pin dependency versions for reproducible builds",
      "expert_agent": "dependency_expert",
      "confidence": 0.9
    }
  ],
  "coe_proposals": [
    {
      "type": "syntax_errors",
      "context": {
        "codebase_path": ".",
        "analysis_scope": "full_codebase",
        "target_language": "python",
        "priority_areas": [
          "security",
          "logic",
          "performance"
        ]
      },
      "proposal": "Analyze syntax_errors in codebase",
      "requester_agent": "bug_buster_orchestrator",
      "priority": "medium",
      "estimated_effort": "medium",
      "dependencies": []
    },
    {
      "type": "logic_bugs",
      "context": {
        "codebase_path": ".",
        "analysis_scope": "full_codebase",
        "target_language": "python",
        "priority_areas": [
          "security",
          "logic",
          "performance"
        ]
      },
      "proposal": "Analyze logic_bugs in codebase",
      "requester_agent": "bug_buster_orchestrator",
      "priority": "medium",
      "estimated_effort": "medium",
      "dependencies": []
    },
    {
      "type": "security_vulnerabilities",
      "context": {
        "codebase_path": ".",
        "analysis_scope": "full_codebase",
        "target_language": "python",
        "priority_areas": [
          "security",
          "logic",
          "performance"
        ]
      },
      "proposal": "Analyze security_vulnerabilities in codebase",
      "requester_agent": "bug_buster_orchestrator",
      "priority": "medium",
      "estimated_effort": "medium",
      "dependencies": []
    },
    {
      "type": "performance_issues",
      "context": {
        "codebase_path": ".",
        "analysis_scope": "full_codebase",
        "target_language": "python",
        "priority_areas": [
          "security",
          "logic",
          "performance"
        ]
      },
      "proposal": "Analyze performance_issues in codebase",
      "requester_agent": "bug_buster_orchestrator",
      "priority": "medium",
      "estimated_effort": "medium",
      "dependencies": []
    },
    {
      "type": "code_smells",
      "context": {
        "codebase_path": ".",
        "analysis_scope": "full_codebase",
        "target_language": "python",
        "priority_areas": [
          "security",
          "logic",
          "performance"
        ]
      },
      "proposal": "Analyze code_smells in codebase",
      "requester_agent": "bug_buster_orchestrator",
      "priority": "medium",
      "estimated_effort": "medium",
      "dependencies": []
    },
    {
      "type": "dependency_issues",
      "context": {
        "codebase_path": ".",
        "analysis_scope": "full_codebase",
        "target_language": "python",
        "priority_areas": [
          "security",
          "logic",
          "performance"
        ]
      },
      "proposal": "Analyze dependency_issues in codebase",
      "requester_agent": "bug_buster_orchestrator",
      "priority": "medium",
      "estimated_effort": "medium",
      "dependencies": []
    }
  ]
}