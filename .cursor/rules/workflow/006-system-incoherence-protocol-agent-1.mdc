---
description: 'RULE TYPE: Agent Requested'
created: '2025-06-07T14:32:13.262797'
migrated: true
original_file: 006-system-incoherence-protocol.mdc
type: agent
---

---
description: `run.py`: Main application entry point. *   `vanta_seed/core/vanta_master_core.py`: Core agent orchestration logic. *   `blueprint.yaml`: High-level system architecture and configuration. *   `.cursor/rules/**/*.mdc`: AI behavior and operational rules. *   `.cursor/rituals/**/*.yaml`: Defined automated sequences. *   `agent_cascade_definitions.mdc`: Agent interaction flows. *   `THEPLAN.md`: Project source of truth for tasks and architecture. *   `logs/agentic_replay.log.jsonl`: Log of AI actions, crucial for detecting patterns of failed edits.
globs: 
alwaysApply: false
---
# RULE TYPE: Agent Requested
# FILE PATTERNS: **/run.py, **/vanta_master_core.py, **/blueprint.yaml, .cursor/rules/**/*.mdc, agentic_replay.log.jsonl

# 006: System Layer Incoherence Protocol

## 1. Overview

System Layer Incoherence (SLI) refers to a state where the AI's internal model or understanding of critical system files or configurations diverges significantly from their actual state on disk. This can occur due to tool limitations (e.g., partial or failed edits), complex concurrent changes, or manual alterations not tracked by the AI.

This protocol defines mechanisms for detecting, diagnosing, and proposing resolutions for SLI to maintain system integrity and reliable AI operation.

## 2. Monitored Assets (Critical Layers)

The following files and directories are considered critical and are primary candidates for SLI monitoring:

*   `run.py`: Main application entry point.
*   `vanta_seed/core/vanta_master_core.py`: Core agent orchestration logic.
*   `blueprint.yaml`: High-level system architecture and configuration.
*   `.cursor/rules/**/*.mdc`: AI behavior and operational rules.
*   `.cursor/rituals/**/*.yaml`: Defined automated sequences.
*   `agent_cascade_definitions.mdc`: Agent interaction flows.
*   `THEPLAN.md`: Project source of truth for tasks and architecture.
*   `logs/agentic_replay.log.jsonl`: Log of AI actions, crucial for detecting patterns of failed edits.

## 3. Triggers for Incoherence Check

An SLI check should be considered or automatically triggered under the following circumstances:

*   **Repeated Edit Failures**: Multiple consecutive failed or "no changes" `edit_file` or `mcp_desktop-commander_edit_block` operations on a monitored asset, especially if changes were expected (logged in `agentic_replay.log.jsonl`).
*   **Post-Major Refactoring**: After significant architectural changes or complex, multi-file refactoring operations.
*   **User Manual Invocation**: If the user suspects incoherence (e.g., `!check system coherence`).
*   **Unexplained Critical Errors**: After a series of unexpected critical runtime errors that cannot be easily attributed to recent logical code changes.
*   **Agent Proposal**: An agent (like Vanta! Coder) might propose an SLI check if it encounters unexpected resistance or errors when trying to apply changes to core files.

## 4. Detection Heuristics (Conceptual)

The `IncoherenceDetectionAgent` will employ the following heuristics:

*   **Log Analysis**:
    *   Scan `agentic_replay.log.jsonl` for patterns like:
        *   Multiple `edit_file` calls to the same file with `status: "no changes"` or `status: "failed"` within a short timeframe.
        *   Discrepancies between intended changes (logged in `instructions`) and reported outcomes.
*   **File State Comparison (Conceptual - Requires Tooling/Agent Capabilities)**:
    *   **Checksum/Hash Mismatch**: If a baseline checksum for a critical file is known, compare it against the current file. (Requires a mechanism to store and update baselines).
    *   **Structural Anomaly Detection**: For structured files (YAML, JSON, Python AST), detect unexpected structural deviations from a known schema or previous state. (Advanced capability).
*   **Rule-Based Validation**:
    *   Check if critical MDC rules (`000-base.mdc`, `index.mdc`) are present and structurally sound (e.g., parsable).
    *   Validate `blueprint.yaml` against a schema if available.

## 5. Resolution Paths

Upon detection of potential SLI, the following resolution paths can be taken, orchestrated by the `system_incoherence_detected_cascade`:

*   **Level 1: Alert & Diagnose**:
    *   Notify the user with specific details about the suspected incoherence (which file, what heuristic triggered).
    *   Provide relevant snippets from `agentic_replay.log.jsonl`.
    *   Suggest manual review using `mcp_desktop-commander_read_file` for the affected file(s).
*   **Level 2: Guided Restore/Replace**:
    *   If a trusted version of the file is identifiable (e.g., from version control, a backup, or a previous known-good state generated by AI), suggest a "hard replace" using `mcp_desktop-commander_write_file`.
    *   Ensure `.cursor/rules/005-destructive-op-safety.mdc` is respected (e.g., backup creation).
*   **Level 3: Specialized Agent Invocation**:
    *   Invoke a (future) `SystemIntegrityRepairAgent` if defined and available.
    *   Trigger a CoE review for complex incoherence scenarios.
*   **Level 4: Interactive Debugging**:
    *   Initiate an interactive session with the user to step through recent changes and identify the source of divergence.

## 6. `IncoherenceDetectionAgent` Profile

*   **Name**: `IncoherenceDetectionAgent`
*   **Type**: `system_monitoring_and_diagnostics`
*   **Responsibilities**:
    *   Implement SLI detection heuristics.
    *   Process `agentic_replay.log.jsonl` for failure patterns.
    *   Interface with file system tools (read-only for detection).
    *   Trigger the `system_incoherence_detected_cascade` upon finding issues.
    *   Log its findings and actions.
*   **Triggers**:
    *   MCP Signal: `mcp_signal_check_system_incoherence`
    *   Scheduled (e.g., after X number of agent interactions).
    *   Event-driven (e.g., after multiple `edit_file` failures logged).
*   **Core Logic (Conceptual Python for `vanta_seed/agents/system/incoherence_detection_agent.py`)**:
    ```python
    class IncoherenceDetectionAgent(BaseAgent):
        def __init__(self, agent_id="incoherence_detector", core=None):
            super().__init__(agent_id, core)
            self.monitored_files = ["run.py", "vanta_seed/core/vanta_master_core.py", ...] # from this rule
            self.log_file_path = "logs/agentic_replay.log.jsonl"

        async def process_input(self, data, context=None):
            command = data.get("command")
            if command == "check_system_incoherence":
                return await self.perform_incoherence_check(data.get("target_file"))
            return {"status": "error", "message": "Unknown command"}

        async def perform_incoherence_check(self, target_file=None):
            findings = []
            # 1. Analyze agentic_replay.log.jsonl
            log_findings = await self._analyze_agent_logs(target_file)
            findings.extend(log_findings)

            # 2. (Future) Checksum/Structural checks if tools/baselines are available

            if findings:
                self.core.emit_mcp_signal(
                    "system_incoherence_detected",
                    {"findings": findings, "resolution_protocol_version": "006_v1"}
                )
                return {"status": "incoherence_detected", "details": findings}
            return {"status": "no_incoherence_detected"}

        async def _analyze_agent_logs(self, target_file=None):
            # Placeholder: Read and parse self.log_file_path
            # Look for patterns of repeated failures for target_file or monitored_files
            # Example: 3+ edit_file failures or "no changes" in last N minutes for specific file
            found_patterns = []
            # Simulated finding
            # if some_condition_met:
            #    found_patterns.append({
            #        "type": "repeated_edit_failure",
            #        "file": target_file or "critical_system_file",
            #        "description": "Multiple edit_file operations failed or reported no changes.",
            #        "log_evidence": ["entry1_id", "entry2_id"] 
            #    })
            return found_patterns
    ```

## 7. Logging and Reinforcement Learning

*   All SLI checks, findings, and resolutions must be logged in `agentic_replay.log.jsonl` with a distinct event type (e.g., `SYSTEM_INCOHERENCE_EVENT`).
*   User feedback on the accuracy of SLI detection and the effectiveness of resolution paths will be used to refine the heuristics and the `IncoherenceDetectionAgent`'s logic.
