---
description: Guidelines for implementing Next.js API routes
globs: app/api/*, api/*.ts, lib/api/routes/*.ts
type: autoAttached
migrated: true
migration_date: '2025-06-07T14:31:54.409407'
---

# API Routes Guidelines

## Next.js App Router
- Use the `route.ts` convention for Route Handlers
- Implement handlers for HTTP methods (GET, POST, etc.)
- Add appropriate type checking for request/response bodies
- Use consistent error handling

## Request Validation
- Validate request parameters and body using Zod
- Return appropriate HTTP status codes for validation errors
- Document expected request formats

## Error Handling
- Use try/catch blocks to handle errors
- Return standardized error responses
- Log errors with appropriate level and context
- Include helpful error messages for debugging
- See **@300-error-handling.mdc** for detailed error handling patterns

## Authentication
- Implement authentication middleware for protected routes
- Verify user permissions for sensitive operations
- Use appropriate session management
- Document authentication requirements

## Response Formatting
- Return consistent JSON response structures
- Set appropriate headers (Content-Type, Cache-Control, etc.)
- Include proper HTTP status codes
- Implement pagination for list endpoints

## Database Integration
- Use Prisma for database operations
- Implement proper error handling for database queries
- Use transactions for operations that modify multiple tables
- For database access guidelines, see **@prisma.mdc**

## Related MDC Rules
- **@prisma.mdc**: For database access patterns and schema
- **@logging.mdc**: For logging standards in API routes
- **@data-fetching.mdc**: For client-side data fetching from these routes
- **@300-error-handling.mdc**: For error handling patterns
- **@server-actions.mdc**: For server action alternatives to API routes

## Example Implementation

```typescript
// app/api/users/[id]/route.ts
import { NextResponse } from 'next/server';
import { z } from 'zod';
import { prisma } from '@/lib/db';
import { auth } from '@/lib/auth';

// Parameter validation schema
const paramsSchema = z.object({
  id: z.string().uuid(),
});

export async function GET(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    // Validate parameters
    const result = paramsSchema.safeParse({ id: params.id });
    if (!result.success) {
      return NextResponse.json(
        { error: 'Invalid user ID format' },
        { status: 400 }
      );
    }

    // Authentication check
    const session = await auth();
    if (!session) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Fetch data
    const user = await prisma.user.findUnique({
      where: { id: params.id },
      select: {
        id: true,
        name: true,
        email: true,
        createdAt: true,
        // Don't include sensitive fields
      },
    });

    if (!user) {
      return NextResponse.json(
        { error: 'User not found' },
        { status: 404 }
      );
    }

    // Return successful response
    return NextResponse.json({ data: user });
  } catch (error) {
    console.error('Error fetching user:', error);
    return NextResponse.json(
      { error: 'Failed to fetch user' },
      { status: 500 }
    );
  }
}
```

## Standard Format

Use this format for API routes:

```ts
import { z } from "zod";
import { NextResponse } from "next/server";
import { auth } from "@/app/api/auth/[...nextauth]/auth";
import prisma from "@/utils/prisma";
import { withError } from "@/utils/middleware";

const apiNameBody = z.object({ id: z.string(), message: z.string() });
export type ApiNameBody = z.infer<typeof apiNameBody>;
export type UpdateApiNameResponse = Awaited<ReturnType<typeof updateApiName>>;

async function updateApiName(body: ApiNameBody, options: { email: string }) {
  const { email } = options;
  const result = await prisma.table.update({
    where: {
      id: body.id,
      email,
    },
    data: body,
  });

  return { result };
}

// For routes without params
export const POST = withError(async (request: Request) => {
  const session = await auth();
  if (!session?.user.email)
    return NextResponse.json({ error: "Not authenticated" });

  const json = await request.json();
  const body = apiNameBody.parse(json);

  const result = await updateApiName(body, { email: session.user.email });

  return NextResponse.json(result);
});

// For routes with params (note the params promise which is how Next.js 15+ works)
export const GET = withError(
  async (
    request: Request,
    { params }: { params: Promise<{ slug: string }> }
  ) => {
    const session = await auth();
    if (!session?.user.email)
      return NextResponse.json({ error: "Not authenticated" });

    const { slug } = await params;
    // Use the slug parameter...

    return NextResponse.json({ result });
  }
);
```

## Implementation Guidelines

- Use Zod for request body validation
- Create separate functions for business logic
- Wrap route handlers with error handling middleware
- Always validate authentication with `auth()`
- Export typed responses for client usage
- For routes with dynamic parameters, use the Next.js 15+ params format
