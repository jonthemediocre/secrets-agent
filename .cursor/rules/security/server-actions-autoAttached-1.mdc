---
description: Guidelines for implementing Next.js server actions
globs: actions/.ts, utils/actions/.ts, lib/actions/.ts
type: autoAttached
migrated: true
migration_date: '2025-06-07T14:32:13.712833'
---

# RULE TYPE: Auto Attached
# FILE PATTERNS: actions/.ts, utils/actions/.ts, lib/actions/.ts

# Server Actions Guidelines

## Format and Structure
Server actions should follow this format:

Files:
- `apps/web/utils/actions/NAME.validation.ts`
- `apps/web/utils/actions/NAME.ts`

For `apps/web/utils/actions/NAME.validation.ts`:

```typescript
import { z } from "zod";

export const createApiKeyBody = z.object({ name: z.string().nullish() });
export type CreateApiKeyBody = z.infer<typeof createApiKeyBody>;

export const deactivateApiKeyBody = z.object({ id: z.string() });
export type DeactivateApiKeyBody = z.infer<typeof deactivateApiKeyBody>;
```

For `apps/web/utils/actions/NAME.ts`:

```typescript
'use server';

import { revalidatePath } from "next/cache";
import { auth } from "@/app/api/auth/[...nextauth]/auth";
import prisma from "@/utils/prisma";
import { withActionInstrumentation } from "@/utils/actions/middleware";
import {
  deactivateApiKeyBody,
  type DeactivateApiKeyBody,
} from "@/utils/actions/api-key.validation";

export const deactivateApiKeyAction = withActionInstrumentation(
  "deactivateApiKey",
  async (unsafeData: DeactivateApiKeyBody) => {
    const session = await auth();
    const userId = session?.user.id;
    if (!userId) return { error: "Not logged in" };

    const { data, success, error } =
      deactivateApiKeyBody.safeParse(unsafeData);
    if (!success) return { error: error.message };

    await prisma.apiKey.update({
      where: { id: data.id, userId },
      data: { isActive: false },
    });

    revalidatePath("/settings");
  }
);
```

## Implementation Guidelines
- Implement type-safe server actions with proper validation
- Define input schemas using Zod for robust type checking and validation
- Handle errors gracefully and return appropriate responses
- Ensure all server actions return the `Promise<ServerActionResponse>` type
- The zod schema will also be used on the client for form validation

## Error Handling
- Use standardized error response format
- Provide helpful error messages for debugging
- Log errors on the server side
- Return appropriate error status codes

## Security Best Practices
- Validate all input data before processing
- Implement proper authentication checks
- Use rate limiting for public endpoints
- Never expose sensitive information in responses
- Sanitize input to prevent SQL injection
