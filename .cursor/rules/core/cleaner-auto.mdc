---
description: Code Cleanup Guidelines
created: '2025-06-07T14:31:54.411738'
migrated: true
original_file: cleaner.mdc
type: auto
---

---
description: Code cleanup and maintenance guidelines
globs: **/*.ts, **/*.tsx, **/*.js, **/*.jsx
type: autoAttached
---
# Code Cleanup Guidelines

## General Principles
- Keep code DRY (Don't Repeat Yourself)
- Follow SOLID principles for OOP
- Use meaningful variable and function names
- Remove commented-out code
- Delete unused imports

## Formatting
- Use consistent indentation (2 spaces)
- Follow line length guidelines (max 80 characters)
- Use consistent spacing around operators
- Keep line breaks consistent
- Group related code blocks

## Dead Code Removal
- Remove unused variables
- Delete unused functions and classes
- Clean up commented-out code blocks
- Remove console.log statements in production
- Delete duplicate code

## Import Optimization
- Group imports by type (React, third-party, local)
- Remove unused imports
- Use specific imports rather than importing entire modules
- Sort imports alphabetically

## Type Management
- Use explicit types rather than 'any' when possible
- Remove redundant type annotations
- Simplify complex type definitions
- Use consistent naming for interfaces and types

## Component Cleanup
- Remove unused props
- Simplify component logic
- Extract repeated JSX into separate components
- Remove unnecessary state variables
- Use proper memoization

## Documentation
- Update comments to match code changes
- Remove misleading or outdated comments
- Document complex algorithms and business logic
- Ensure JSDoc comments are accurate and complete

## Code Quality
- Remove unused code
- Fix linting issues
- Update dependencies
- Optimize imports

## Testing
- Fix broken tests
- Add missing tests
- Update test data
- Remove obsolete tests

## Performance
- Remove bottlenecks
- Optimize queries
- Clean up memory leaks
- Remove redundant code

## Maintenance
- Update dependencies
- Fix security issues
- Remove deprecated code
- Update configurations

## Inbox Cleaner

The inbox cleaner helps users do a deep clean of their inbox.
It helps them get from 10,000 items in their inbox to only a few.
It works by archiving/marking read low priority emails.
It uses a combination of static and AI rules to do the clean up.
It uses both Postgres (Prisma) and Redis.
We store short term memory in Redis that expires after a few hours. This is data like email subject so we can quickly show it to the user, but this isn't data we want stored long term to enhance privacy for the user while balancing this with a faster experience.
Once the cleaning process has started we show the emails streamed in with the action taken on the email (archive/keep).

The main files and directories for this are:

- apps/web/utils/actions/clean.ts
- apps/web/app/api/clean/
- apps/web/app/(app)/clean/page.tsx
- apps/web/app/(app)/clean/
- apps/web/prisma/schema.prisma
- apps/web/utils/redis/clean.ts

The database models to look at are:

- CleanupThread
- CleanupJob
