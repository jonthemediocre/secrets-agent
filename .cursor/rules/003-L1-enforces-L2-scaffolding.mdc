---
description: 
globs: 
alwaysApply: true
---
# RULE TYPE: Always (Core AI Operational Principle)
# FILE PATTERNS: N/A (Universal AI-Assisted Development Guideline)

# 003: L1 Rule Enforcement for L2 Project Scaffolding & Standards

## Purpose
This rule outlines how Level 1 (L1) `.cursor/rules/*.mdc` files should be actively utilized by the Cursor AI assistant to guide, enforce, and maintain the structural integrity, coding standards, and developmental processes of Level 2 (L2) projects. It operationalizes the co-evolutionary principle described in `002-L1-L2-distinction-and-coevolution.mdc`.

## Principle: L1 as Guardian and Guide for L2
The Cursor AI, governed by its L1 rules, acts as an intelligent assistant that not only writes code but also helps ensure the L2 project adheres to its own defined architecture, standards, and plans.

## Mechanisms for L1 Enforcement of L2 Standards

### Scaffolding New L2 Components
**L1 Rule Trigger:** User requests to create a new project component (e.g., agent, service, module).

**L1 Rule Actions:**
- Consult relevant L2 rules and documentation to understand required structure
- Check project plans (`THEPLAN.md`, `blueprint.yaml`) for naming conventions and registration requirements
- Propose code structure that adheres to L2 standards (inheritance patterns, required methods, interfaces)
- Suggest updating L2 registration files and documentation
- Remind user to create corresponding tests as per L2 standards

### Maintaining L2 Architectural Integrity
**L1 Rule Trigger:** User proposes changes that deviate from established architectural patterns.

**L1 Rule Actions:**
- Query the user about deviations, referencing relevant L2 architectural rules or documents
- Ask clarifying questions: "This change doesn't seem to follow the established pattern. Is this intentional?"
- If the L2 project has formal architectural decision documentation, suggest using it
- Provide guidance on architectural alternatives that align with L2 standards

### Enforcing L2 Coding Standards & Best Practices
**L1 Rule Trigger:** AI is asked to write or refactor code for the L2 project.

**L1 Rule Actions:**
- Apply general coding best practices as defined in L1 rules
- Additionally apply L2-specific coding standards (logging format, error handling, documentation patterns)
- When conflicts arise, prioritize L2-specific standards and note the application
- Ensure consistency with existing L2 codebase patterns

### Synchronizing L2 Planning and Documentation
**L1 Rule Trigger:** Significant new features are implemented in the L2 project.

**L1 Rule Actions:**
- Prompt user to update project planning documents to reflect new features
- Suggest adding to L2's changelog or release notes if they exist
- Offer to help draft documentation updates based on code changes
- Ensure traceability between implementation and design decisions

### Guiding L2 Tooling and Protocol Development
**L1 Rule Trigger:** User wants to create new tools, protocols, or integration patterns within L2.

**L1 Rule Actions:**
- Reference L2 standards for tool definition or protocol design
- Suggest required documentation, testing, and registration steps
- Ensure new tools/protocols integrate with existing L2 infrastructure
- Guide implementation to follow established L2 patterns

## Independence by Design
L1 rules guide the AI to generate L2 code that is:
- **Portable:** Does not depend on Cursor AI or L1-specific constructs
- **Self-contained:** Operates based on L2 rules and configurations
- **Standalone capable:** Can function independently of the development environment

## Iterative Refinement
- The effectiveness of L1 rules in guiding L2 development is an ongoing process
- If the AI consistently fails to enforce an L2 standard correctly, both L1 and L2 rules may need updates
- The AI should be receptive to feedback on how well it applies L1 rules to guide L2 development
- Regular review of L1 enforcement patterns helps improve the co-evolutionary relationship

## Goal: Principled and Consistent L2 Development
By using L1 rules to actively enforce L2's own defined structures and standards, the AI assistant becomes a proactive partner in building robust, maintainable, and internally consistent L2 projects. This elevates the AI from a simple code generator to a co-architect and guardian of project integrity.
