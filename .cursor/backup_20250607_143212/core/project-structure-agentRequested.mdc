---
description: Project structure and file organization guidelines
globs: app/, components/, lib/, pages/
type: agentRequested
migrated: true
migration_date: '2025-06-07T14:31:54.461412'
---

# RULE TYPE: Agent Requested
# FILE PATTERNS: app/, components/, lib/, pages/

# Project Structure Guidelines

## Next.js App Router Structure
- `app/` - App Router routes and layouts
  - `(auth)/` - Authentication-related routes (grouped)
  - `(dashboard)/` - Dashboard-related routes (grouped)
  - `api/` - API routes using Route Handlers
  - `layout.tsx` - Root layout with providers
  - `page.tsx` - Home page component
  
## Component Organization
- `components/` - UI components
  - `ui/` - Reusable UI components (shadcn/ui)
  - `layouts/` - Layout components
  - `forms/` - Form-specific components
  - `[feature]/` - Feature-specific components

## Utility Functions
- `lib/` - Shared utility functions
  - `db/` - Database-related utilities
  - `utils/` - General utility functions
  - `api/` - API-related functions
  - `hooks/` - Custom React hooks
  - `contexts/` - React context providers

## Data Access
- `prisma/` - Prisma schema and migrations
- `lib/db/` - Database access functions

## Configuration
- `config/` - Configuration files
- `.env.local` - Environment variables
- `tailwind.config.js` - Tailwind CSS configuration
- `next.config.js` - Next.js configuration

## Main Structure
- We use Turborepo with pnpm workspaces
- Main app is in `apps/web`
- Packages are in the `packages` folder
- Server actions are in `apps/web/utils/actions` folder

## File Naming and Organization
- Use kebab case for route directories (e.g., `api/hello-world/route`)
- Use PascalCase for components (e.g. `components/Button.tsx`)
- Shadcn components are in `components/ui`
- All other components are in `components/`
- Colocate files in the folder where they're used unless they can be used across the app
- If a component can be used in many places, place it in the `components` folder

## New Pages
- Create new pages at: `apps/web/app/(app)/PAGE_NAME/page.tsx`
- Components for the page are either in `page.tsx` or in the `apps/web/app/(app)/PAGE_NAME` folder
- Pages are Server components for direct data loading
- Use `swr` for data fetching in deeply nested components
- Components with `onClick` must be client components with `use client` directive
- Server action files must start with `use server`

## Utility Functions
- Create utility functions in `utils/` folder for reusable logic
- Use lodash utilities for common operations (arrays, objects, strings)
- Import specific lodash functions to minimize bundle size:
  ```ts
  import groupBy from "lodash/groupBy";
  ```
