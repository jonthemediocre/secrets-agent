---
description: 
globs: 
alwaysApply: true
---
---
description: AI learning documentation and insights
---

# RULE TYPE: Agent Requested
# FILE PATTERNS: Not applicable for Agent Requested rules

# AI Learning Documentation

## Pattern Discoveries

### [React Component Patterns]
- 📚 Source: Pattern detected in src/components/test/TestPatterns.tsx
- 🧠 Purpose: Improve code consistency and reusability
- ⚙️ Pattern: Component pattern
- 🔁 Frequency: 1
- 🧩 Confidence: 0.8

### [Error Handling Patterns]
- 📚 Source: Pattern detected in src/components/test/TestPatterns.tsx
- 🧠 Purpose: Improve error handling consistency
- ⚙️ Pattern: Error handling pattern
- 🔁 Frequency: 1
- 🧩 Confidence: 0.8

### [Data Fetching Patterns]
- 📚 Source: Pattern detected in src/components/test/TestPatterns.tsx
- 🧠 Purpose: Standardize data fetching approach
- ⚙️ Pattern: Async operation pattern
- 🔁 Frequency: 1
- 🧩 Confidence: 0.8

## Rule Improvements

### [Component Rule Update]
- 📝 Rule: 100-next-components.mdc
- 🔄 Type: Update
- 📈 Impact: Added error handling guidelines
- ✅ Validation: Test coverage, code review

### [Error Handling Rule Update]
- 📝 Rule: 300-error-handling.mdc
- 🔄 Type: Update
- 📈 Impact: Added async error patterns
- ✅ Validation: Error boundary tests

## Best Practices

### [Component Testing]
- 🎯 Focus: Comprehensive test coverage
- 📊 Metrics: Test coverage increased
- 🔍 Insight: Mock external dependencies
- 📝 Documentation: Updated test guidelines

### [Error Recovery]
- 🎯 Focus: Graceful error handling
- 📊 Metrics: Reduced error reports
- 🔍 Insight: User-friendly error messages
- 📝 Documentation: Added error examples

# AI Learning Documentation Guidelines

## Structure
- Use consistent markdown formatting for all AI learnings
- Organize learnings by feature or component name
- Include date and context for each learning
- Tag learnings with appropriate categories

## Categories
- 📚 **UX Pattern**: UI/UX patterns and their effectiveness
- 🧠 **Component Reuse**: Successful patterns for component reuse
- ⚙️ **Pattern**: General patterns that improve outcomes
- 🔁 **Edge Case**: Edge cases and their solutions
- 🧩 **Agent Insight**: Key insights for future reference
- 🐛 **Bug Pattern**: Common bug patterns and solutions
- 🚀 **Performance**: Performance optimization strategies
- 🔒 **Security**: Security-related learnings
- 🧪 **Testing**: Test strategies and patterns

## Format
```markdown
### [Feature/Component Name]

- 📚 Learned how `<UX pattern>` improves flow in `<context>`
- 🧠 Validated reuse of `<hook>` or `<component>` 
- ⚙️ Pattern: `<describe pattern>` improves `<outcome>`
- 🔁 Edge case: `<describe edge case and solution>`
- 🧩 Agent insight: `<describe key insight for future reference>`
```

## Example
```markdown
### Dashboard Error Handling

- 🐛 Bug Pattern: Missing icons in Icons component causes component rendering failures
- 🧩 Agent Insight: Centralized icon management prevents scattered import errors
- ⚙️ Pattern: Error boundaries around major UI sections prevent full page crashes
- 🔁 Edge case: Database connection failures in development mode need mock data fallbacks
- 📚 UX Pattern: Clear error messages with recovery options improve user experience
```

## Integration
- Update AI learnings after solving significant issues
- Reference learnings when implementing similar features
- Use learnings to evolve coding standards
- Apply learnings to improve error handling and edge cases 