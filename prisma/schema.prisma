// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./secrets-agent.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  passwordHash  String?   @map("password_hash")
  role          String    @default("user")
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  vaults   Vault[]
  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Vault {
  id            String   @id @default(cuid())
  name          String
  ownerId       String   @map("owner_id")
  encryptionKey String   @map("encryption_key")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  owner   User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  secrets Secret[]

  @@map("vaults")
}

model Secret {
  id              String   @id @default(cuid())
  vaultId         String   @map("vault_id")
  key             String
  valueEncrypted  String   @map("value_encrypted")
  metadata        String?  // JSON stored as string
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  vault            Vault             @relation(fields: [vaultId], references: [id], onDelete: Cascade)
  rotationPolicies RotationPolicy[]

  @@unique([vaultId, key])
  @@map("secrets")
}

model RotationPolicy {
  id           String    @id @default(cuid())
  secretId     String    @map("secret_id")
  intervalDays Int       @map("interval_days")
  lastRotated  DateTime? @map("last_rotated")
  nextRotation DateTime? @map("next_rotation")
  active       Boolean   @default(true)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  secret Secret @relation(fields: [secretId], references: [id], onDelete: Cascade)

  @@map("rotation_policies")
} 